
LineFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001402  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00001402  00001496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000031  0080016c  0080016c  000015a2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000015a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002c2  00000000  00000000  000015c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fb5  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000233  00000000  00000000  00002839  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d2b  00000000  00000000  00002a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  00003798  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ef  00000000  00000000  00003988  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000421  00000000  00000000  00003c77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 39       	cpi	r26, 0x9D	; 157
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 41 02 	call	0x482	; 0x482 <main>
      8a:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_set_4bit>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      92:	8a ef       	ldi	r24, 0xFA	; 250
      94:	90 e0       	ldi	r25, 0x00	; 0
      96:	fc 01       	movw	r30, r24
      98:	31 97       	sbiw	r30, 0x01	; 1
      9a:	f1 f7       	brne	.-4      	; 0x98 <lcd_set_4bit+0x6>
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
      9c:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
      9e:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3 in the upper nibble
      a0:	40 e3       	ldi	r20, 0x30	; 48
      a2:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
      a4:	aa 9a       	sbi	0x15, 2	; 21
      a6:	22 ee       	ldi	r18, 0xE2	; 226
      a8:	34 e0       	ldi	r19, 0x04	; 4
      aa:	f9 01       	movw	r30, r18
      ac:	31 97       	sbiw	r30, 0x01	; 1
      ae:	f1 f7       	brne	.-4      	; 0xac <lcd_set_4bit+0x1a>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
      b0:	aa 98       	cbi	0x15, 2	; 21
      b2:	fc 01       	movw	r30, r24
      b4:	31 97       	sbiw	r30, 0x01	; 1
      b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_set_4bit+0x22>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
      b8:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
      ba:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3 in the upper nibble
      bc:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
      be:	aa 9a       	sbi	0x15, 2	; 21
      c0:	f9 01       	movw	r30, r18
      c2:	31 97       	sbiw	r30, 0x01	; 1
      c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_set_4bit+0x30>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
      c6:	aa 98       	cbi	0x15, 2	; 21
      c8:	fc 01       	movw	r30, r24
      ca:	31 97       	sbiw	r30, 0x01	; 1
      cc:	f1 f7       	brne	.-4      	; 0xca <lcd_set_4bit+0x38>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
      ce:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
      d0:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x30;				//Sending 3 in the upper nibble
      d2:	45 bb       	out	0x15, r20	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
      d4:	aa 9a       	sbi	0x15, 2	; 21
      d6:	f9 01       	movw	r30, r18
      d8:	31 97       	sbiw	r30, 0x01	; 1
      da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_set_4bit+0x46>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
      dc:	aa 98       	cbi	0x15, 2	; 21
      de:	01 97       	sbiw	r24, 0x01	; 1
      e0:	f1 f7       	brne	.-4      	; 0xde <lcd_set_4bit+0x4c>

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
      e2:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
      e4:	a9 98       	cbi	0x15, 1	; 21
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
      e6:	80 e2       	ldi	r24, 0x20	; 32
      e8:	85 bb       	out	0x15, r24	; 21
	sbit(lcd_port,EN);				//Set Enable Pin
      ea:	aa 9a       	sbi	0x15, 2	; 21
      ec:	c9 01       	movw	r24, r18
      ee:	01 97       	sbiw	r24, 0x01	; 1
      f0:	f1 f7       	brne	.-4      	; 0xee <lcd_set_4bit+0x5c>
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
      f2:	aa 98       	cbi	0x15, 2	; 21
}
      f4:	08 95       	ret

000000f6 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
      f6:	95 b3       	in	r25, 0x15	; 21
      f8:	9f 70       	andi	r25, 0x0F	; 15
      fa:	95 bb       	out	0x15, r25	; 21
	lcd_port |= temp;
      fc:	25 b3       	in	r18, 0x15	; 21
      fe:	98 2f       	mov	r25, r24
     100:	90 7f       	andi	r25, 0xF0	; 240
     102:	92 2b       	or	r25, r18
     104:	95 bb       	out	0x15, r25	; 21
	cbit(lcd_port,RS);
     106:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);
     108:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
     10a:	aa 9a       	sbi	0x15, 2	; 21
     10c:	22 ee       	ldi	r18, 0xE2	; 226
     10e:	34 e0       	ldi	r19, 0x04	; 4
     110:	f9 01       	movw	r30, r18
     112:	31 97       	sbiw	r30, 0x01	; 1
     114:	f1 f7       	brne	.-4      	; 0x112 <lcd_wr_command+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     116:	aa 98       	cbi	0x15, 2	; 21
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     118:	95 b3       	in	r25, 0x15	; 21
     11a:	9f 70       	andi	r25, 0x0F	; 15
     11c:	95 bb       	out	0x15, r25	; 21
	lcd_port |= cmd;
     11e:	95 b3       	in	r25, 0x15	; 21
     120:	82 95       	swap	r24
     122:	80 7f       	andi	r24, 0xF0	; 240
     124:	98 2b       	or	r25, r24
     126:	95 bb       	out	0x15, r25	; 21
	cbit(lcd_port,RS);
     128:	a8 98       	cbi	0x15, 0	; 21
	cbit(lcd_port,RW);
     12a:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
     12c:	aa 9a       	sbi	0x15, 2	; 21
     12e:	c9 01       	movw	r24, r18
     130:	01 97       	sbiw	r24, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <lcd_wr_command+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     134:	aa 98       	cbi	0x15, 2	; 21
}
     136:	08 95       	ret

00000138 <lcd_init>:
     138:	8a ef       	ldi	r24, 0xFA	; 250
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	01 97       	sbiw	r24, 0x01	; 1
     13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_init+0x4>
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
     140:	88 e2       	ldi	r24, 0x28	; 40
     142:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
     14c:	86 e0       	ldi	r24, 0x06	; 6
     14e:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
     152:	8e e0       	ldi	r24, 0x0E	; 14
     154:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
     158:	80 e8       	ldi	r24, 0x80	; 128
     15a:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
}
     15e:	08 95       	ret

00000160 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     160:	95 b3       	in	r25, 0x15	; 21
     162:	9f 70       	andi	r25, 0x0F	; 15
     164:	95 bb       	out	0x15, r25	; 21
	lcd_port |= temp;
     166:	25 b3       	in	r18, 0x15	; 21
     168:	98 2f       	mov	r25, r24
     16a:	90 7f       	andi	r25, 0xF0	; 240
     16c:	92 2b       	or	r25, r18
     16e:	95 bb       	out	0x15, r25	; 21
	sbit(lcd_port,RS);
     170:	a8 9a       	sbi	0x15, 0	; 21
	cbit(lcd_port,RW);
     172:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
     174:	aa 9a       	sbi	0x15, 2	; 21
     176:	22 ee       	ldi	r18, 0xE2	; 226
     178:	34 e0       	ldi	r19, 0x04	; 4
     17a:	f9 01       	movw	r30, r18
     17c:	31 97       	sbiw	r30, 0x01	; 1
     17e:	f1 f7       	brne	.-4      	; 0x17c <lcd_wr_char+0x1c>
	_delay_ms(5);
	cbit(lcd_port,EN);
     180:	aa 98       	cbi	0x15, 2	; 21

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     182:	95 b3       	in	r25, 0x15	; 21
     184:	9f 70       	andi	r25, 0x0F	; 15
     186:	95 bb       	out	0x15, r25	; 21
	lcd_port |= letter;
     188:	95 b3       	in	r25, 0x15	; 21
     18a:	82 95       	swap	r24
     18c:	80 7f       	andi	r24, 0xF0	; 240
     18e:	98 2b       	or	r25, r24
     190:	95 bb       	out	0x15, r25	; 21
	sbit(lcd_port,RS);
     192:	a8 9a       	sbi	0x15, 0	; 21
	cbit(lcd_port,RW);
     194:	a9 98       	cbi	0x15, 1	; 21
	sbit(lcd_port,EN);
     196:	aa 9a       	sbi	0x15, 2	; 21
     198:	c9 01       	movw	r24, r18
     19a:	01 97       	sbiw	r24, 0x01	; 1
     19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_wr_char+0x3a>
	_delay_ms(5);
	cbit(lcd_port,EN);
     19e:	aa 98       	cbi	0x15, 2	; 21
}
     1a0:	08 95       	ret

000001a2 <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
     1a2:	80 e8       	ldi	r24, 0x80	; 128
     1a4:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
}
     1a8:	08 95       	ret

000001aa <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	ec 01       	movw	r28, r24
     1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <lcd_string+0xe>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     1b2:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
		str++;
     1b6:	21 96       	adiw	r28, 0x01	; 1


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     1b8:	88 81       	ld	r24, Y
     1ba:	88 23       	and	r24, r24
     1bc:	d1 f7       	brne	.-12     	; 0x1b2 <lcd_string+0x8>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
     1c2:	08 95       	ret

000001c4 <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
     1c4:	82 30       	cpi	r24, 0x02	; 2
     1c6:	69 f0       	breq	.+26     	; 0x1e2 <lcd_cursor+0x1e>
     1c8:	83 30       	cpi	r24, 0x03	; 3
     1ca:	18 f4       	brcc	.+6      	; 0x1d2 <lcd_cursor+0xe>
     1cc:	81 30       	cpi	r24, 0x01	; 1
     1ce:	a9 f4       	brne	.+42     	; 0x1fa <lcd_cursor+0x36>
     1d0:	05 c0       	rjmp	.+10     	; 0x1dc <lcd_cursor+0x18>
     1d2:	83 30       	cpi	r24, 0x03	; 3
     1d4:	49 f0       	breq	.+18     	; 0x1e8 <lcd_cursor+0x24>
     1d6:	84 30       	cpi	r24, 0x04	; 4
     1d8:	81 f4       	brne	.+32     	; 0x1fa <lcd_cursor+0x36>
     1da:	0b c0       	rjmp	.+22     	; 0x1f2 <lcd_cursor+0x2e>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     1dc:	86 2f       	mov	r24, r22
     1de:	81 58       	subi	r24, 0x81	; 129
     1e0:	05 c0       	rjmp	.+10     	; 0x1ec <lcd_cursor+0x28>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     1e2:	86 2f       	mov	r24, r22
     1e4:	81 54       	subi	r24, 0x41	; 65
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <lcd_cursor+0x28>
		case 3: lcd_wr_command (0x94 + column - 1); break;
     1e8:	86 2f       	mov	r24, r22
     1ea:	8d 56       	subi	r24, 0x6D	; 109
     1ec:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
     1f0:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     1f2:	86 2f       	mov	r24, r22
     1f4:	8d 52       	subi	r24, 0x2D	; 45
     1f6:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_wr_command>
     1fa:	08 95       	ret

000001fc <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	8a 01       	movw	r16, r20
     206:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     208:	88 23       	and	r24, r24
     20a:	11 f0       	breq	.+4      	; 0x210 <lcd_print+0x14>
     20c:	66 23       	and	r22, r22
     20e:	19 f4       	brne	.+6      	; 0x216 <lcd_print+0x1a>
	{
		lcd_home();
     210:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_home>
     214:	02 c0       	rjmp	.+4      	; 0x21a <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     216:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     21a:	c5 30       	cpi	r28, 0x05	; 5
     21c:	d1 05       	cpc	r29, r1
     21e:	71 f4       	brne	.+28     	; 0x23c <lcd_print+0x40>
	{
		million=value/10000+48;
     220:	c8 01       	movw	r24, r16
     222:	60 e1       	ldi	r22, 0x10	; 16
     224:	77 e2       	ldi	r23, 0x27	; 39
     226:	0e 94 b4 09 	call	0x1368	; 0x1368 <__udivmodhi4>
     22a:	cb 01       	movw	r24, r22
     22c:	c0 96       	adiw	r24, 0x30	; 48
     22e:	90 93 8f 01 	sts	0x018F, r25
     232:	80 93 8e 01 	sts	0x018E, r24
		lcd_wr_char(million);
     236:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
     23a:	05 c0       	rjmp	.+10     	; 0x246 <lcd_print+0x4a>
		flag=1;
	}
	if(digits==4 || flag==1)
     23c:	c4 30       	cpi	r28, 0x04	; 4
     23e:	d1 05       	cpc	r29, r1
     240:	11 f0       	breq	.+4      	; 0x246 <lcd_print+0x4a>
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	16 c0       	rjmp	.+44     	; 0x272 <lcd_print+0x76>
	{
		temp = value/1000;
     246:	c8 01       	movw	r24, r16
     248:	68 ee       	ldi	r22, 0xE8	; 232
     24a:	73 e0       	ldi	r23, 0x03	; 3
     24c:	0e 94 b4 09 	call	0x1368	; 0x1368 <__udivmodhi4>
     250:	cb 01       	movw	r24, r22
     252:	60 93 90 01 	sts	0x0190, r22
     256:	90 93 91 01 	sts	0x0191, r25
		thousand = temp%10 + 48;
     25a:	6a e0       	ldi	r22, 0x0A	; 10
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	0e 94 b4 09 	call	0x1368	; 0x1368 <__udivmodhi4>
     262:	c0 96       	adiw	r24, 0x30	; 48
     264:	90 93 9c 01 	sts	0x019C, r25
     268:	80 93 9b 01 	sts	0x019B, r24
		lcd_wr_char(thousand);
     26c:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
     270:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==3 || flag==1)
     272:	c3 30       	cpi	r28, 0x03	; 3
     274:	d1 05       	cpc	r29, r1
     276:	21 f0       	breq	.+8      	; 0x280 <lcd_print+0x84>
     278:	81 30       	cpi	r24, 0x01	; 1
     27a:	11 f0       	breq	.+4      	; 0x280 <lcd_print+0x84>
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	16 c0       	rjmp	.+44     	; 0x2ac <lcd_print+0xb0>
	{
		temp = value/100;
     280:	c8 01       	movw	r24, r16
     282:	64 e6       	ldi	r22, 0x64	; 100
     284:	70 e0       	ldi	r23, 0x00	; 0
     286:	0e 94 b4 09 	call	0x1368	; 0x1368 <__udivmodhi4>
     28a:	cb 01       	movw	r24, r22
     28c:	60 93 90 01 	sts	0x0190, r22
     290:	90 93 91 01 	sts	0x0191, r25
		hundred = temp%10 + 48;
     294:	6a e0       	ldi	r22, 0x0A	; 10
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	0e 94 b4 09 	call	0x1368	; 0x1368 <__udivmodhi4>
     29c:	c0 96       	adiw	r24, 0x30	; 48
     29e:	90 93 98 01 	sts	0x0198, r25
     2a2:	80 93 97 01 	sts	0x0197, r24
		lcd_wr_char(hundred);
     2a6:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
     2aa:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==2 || flag==1)
     2ac:	c2 30       	cpi	r28, 0x02	; 2
     2ae:	d1 05       	cpc	r29, r1
     2b0:	21 f0       	breq	.+8      	; 0x2ba <lcd_print+0xbe>
     2b2:	81 30       	cpi	r24, 0x01	; 1
     2b4:	11 f0       	breq	.+4      	; 0x2ba <lcd_print+0xbe>
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	16 c0       	rjmp	.+44     	; 0x2e6 <lcd_print+0xea>
	{
		temp = value/10;
     2ba:	c8 01       	movw	r24, r16
     2bc:	6a e0       	ldi	r22, 0x0A	; 10
     2be:	70 e0       	ldi	r23, 0x00	; 0
     2c0:	0e 94 b4 09 	call	0x1368	; 0x1368 <__udivmodhi4>
     2c4:	cb 01       	movw	r24, r22
     2c6:	60 93 90 01 	sts	0x0190, r22
     2ca:	90 93 91 01 	sts	0x0191, r25
		tens = temp%10 + 48;
     2ce:	6a e0       	ldi	r22, 0x0A	; 10
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	0e 94 b4 09 	call	0x1368	; 0x1368 <__udivmodhi4>
     2d6:	c0 96       	adiw	r24, 0x30	; 48
     2d8:	90 93 96 01 	sts	0x0196, r25
     2dc:	80 93 95 01 	sts	0x0195, r24
		lcd_wr_char(tens);
     2e0:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
     2e4:	81 e0       	ldi	r24, 0x01	; 1
		flag=1;
	}
	if(digits==1 || flag==1)
     2e6:	c1 30       	cpi	r28, 0x01	; 1
     2e8:	d1 05       	cpc	r29, r1
     2ea:	11 f0       	breq	.+4      	; 0x2f0 <lcd_print+0xf4>
     2ec:	81 30       	cpi	r24, 0x01	; 1
     2ee:	61 f4       	brne	.+24     	; 0x308 <lcd_print+0x10c>
	{
		unit = value%10 + 48;
     2f0:	c8 01       	movw	r24, r16
     2f2:	6a e0       	ldi	r22, 0x0A	; 10
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	0e 94 b4 09 	call	0x1368	; 0x1368 <__udivmodhi4>
     2fa:	c0 96       	adiw	r24, 0x30	; 48
     2fc:	90 93 9a 01 	sts	0x019A, r25
     300:	80 93 99 01 	sts	0x0199, r24
		lcd_wr_char(unit);
     304:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
	}
	if(digits>5)
     308:	26 97       	sbiw	r28, 0x06	; 6
     30a:	1c f0       	brlt	.+6      	; 0x312 <lcd_print+0x116>
	{
		lcd_wr_char('E');
     30c:	85 e4       	ldi	r24, 0x45	; 69
     30e:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
	}
}
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	08 95       	ret

0000031c <lcd_port_config>:


//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
     31c:	84 b3       	in	r24, 0x14	; 20
     31e:	87 6f       	ori	r24, 0xF7	; 247
     320:	84 bb       	out	0x14, r24	; 20
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
     322:	85 b3       	in	r24, 0x15	; 21
     324:	80 78       	andi	r24, 0x80	; 128
     326:	85 bb       	out	0x15, r24	; 21
}
     328:	08 95       	ret

0000032a <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 DDRA = 0x00;   //set PORTF direction as input
     32a:	1a ba       	out	0x1a, r1	; 26
 PORTA = 0x00;  //set PORTF pins floating
     32c:	1b ba       	out	0x1b, r1	; 27
}
     32e:	08 95       	ret

00000330 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
 DDRB = DDRB | 0x0F;    //set direction of the PORTB3 to PORTB0 pins as output
     330:	87 b3       	in	r24, 0x17	; 23
     332:	8f 60       	ori	r24, 0x0F	; 15
     334:	87 bb       	out	0x17, r24	; 23
 PORTB = PORTB & 0xF0;  //set initial value of the PORTB3 to PORTB0 pins to logic 0
     336:	88 b3       	in	r24, 0x18	; 24
     338:	80 7f       	andi	r24, 0xF0	; 240
     33a:	88 bb       	out	0x18, r24	; 24
 DDRD = DDRD | 0x30;    //Setting PD5 and PD4 pins as output for PWM generation
     33c:	81 b3       	in	r24, 0x11	; 17
     33e:	80 63       	ori	r24, 0x30	; 48
     340:	81 bb       	out	0x11, r24	; 17
 PORTD = PORTD | 0x30;  //PD5 and PD4 pins are for velocity control using PWM
     342:	82 b3       	in	r24, 0x12	; 18
     344:	80 63       	ori	r24, 0x30	; 48
     346:	82 bb       	out	0x12, r24	; 18
}
     348:	08 95       	ret

0000034a <port_init>:


//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
     34a:	84 b3       	in	r24, 0x14	; 20
     34c:	87 6f       	ori	r24, 0xF7	; 247
     34e:	84 bb       	out	0x14, r24	; 20
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
     350:	85 b3       	in	r24, 0x15	; 21
     352:	80 78       	andi	r24, 0x80	; 128
     354:	85 bb       	out	0x15, r24	; 21
}

//ADC pin configuration
void adc_pin_config (void)
{
 DDRA = 0x00;   //set PORTF direction as input
     356:	1a ba       	out	0x1a, r1	; 26
 PORTA = 0x00;  //set PORTF pins floating
     358:	1b ba       	out	0x1b, r1	; 27
}

//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
 DDRB = DDRB | 0x0F;    //set direction of the PORTB3 to PORTB0 pins as output
     35a:	87 b3       	in	r24, 0x17	; 23
     35c:	8f 60       	ori	r24, 0x0F	; 15
     35e:	87 bb       	out	0x17, r24	; 23
 PORTB = PORTB & 0xF0;  //set initial value of the PORTB3 to PORTB0 pins to logic 0
     360:	88 b3       	in	r24, 0x18	; 24
     362:	80 7f       	andi	r24, 0xF0	; 240
     364:	88 bb       	out	0x18, r24	; 24
 DDRD = DDRD | 0x30;    //Setting PD5 and PD4 pins as output for PWM generation
     366:	81 b3       	in	r24, 0x11	; 17
     368:	80 63       	ori	r24, 0x30	; 48
     36a:	81 bb       	out	0x11, r24	; 17
 PORTD = PORTD | 0x30;  //PD5 and PD4 pins are for velocity control using PWM
     36c:	82 b3       	in	r24, 0x12	; 18
     36e:	80 63       	ori	r24, 0x30	; 48
     370:	82 bb       	out	0x12, r24	; 18
void port_init()
{
 lcd_port_config();
 adc_pin_config();    
 motion_pin_config();
}
     372:	08 95       	ret

00000374 <timer1_init>:
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// desired value: 450Hz
// actual value: 450.000Hz (0.0%)
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     374:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0xFF; //setup
     376:	9f ef       	ldi	r25, 0xFF	; 255
     378:	9d bd       	out	0x2d, r25	; 45
 TCNT1L = 0x01;
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	8c bd       	out	0x2c, r24	; 44
 OCR1AH = 0x00;
     37e:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0xFF;
     380:	9a bd       	out	0x2a, r25	; 42
 OCR1BH = 0x00;
     382:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0xFF;
     384:	98 bd       	out	0x28, r25	; 40
 ICR1H  = 0x00;
     386:	17 bc       	out	0x27, r1	; 39
 ICR1L  = 0xFF;
     388:	96 bd       	out	0x26, r25	; 38
 TCCR1A = 0xA1;
     38a:	81 ea       	ldi	r24, 0xA1	; 161
     38c:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x0D; //start Timer
     38e:	8d e0       	ldi	r24, 0x0D	; 13
     390:	8e bd       	out	0x2e, r24	; 46
}
     392:	08 95       	ret

00000394 <adc_init>:


//Function to Initialize ADC
void adc_init()
{
 ADCSRA = 0x00;
     394:	16 b8       	out	0x06, r1	; 6
 ADMUX = 0x20;    //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     396:	80 e2       	ldi	r24, 0x20	; 32
     398:	87 b9       	out	0x07, r24	; 7
 ACSR = 0x80;
     39a:	80 e8       	ldi	r24, 0x80	; 128
     39c:	88 b9       	out	0x08, r24	; 8
 ADCSRA = 0x86;   //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     39e:	86 e8       	ldi	r24, 0x86	; 134
     3a0:	86 b9       	out	0x06, r24	; 6
}
     3a2:	08 95       	ret

000003a4 <ADC_Conversion>:
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;        
 ADMUX= 0x20| Ch;       
     3a4:	87 70       	andi	r24, 0x07	; 7
     3a6:	80 62       	ori	r24, 0x20	; 32
     3a8:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40;  //Set start conversion bit
     3aa:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0); //Wait for ADC conversion to complete
     3ac:	34 9b       	sbis	0x06, 4	; 6
     3ae:	fe cf       	rjmp	.-4      	; 0x3ac <ADC_Conversion+0x8>
 a=ADCH;
     3b0:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     3b2:	34 9a       	sbi	0x06, 4	; 6
 return a;
}
     3b4:	08 95       	ret

000003b6 <print_sensor>:
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;        
 ADMUX= 0x20| Ch;       
     3b6:	47 70       	andi	r20, 0x07	; 7
     3b8:	40 62       	ori	r20, 0x20	; 32
     3ba:	47 b9       	out	0x07, r20	; 7
 ADCSRA = ADCSRA | 0x40;  //Set start conversion bit
     3bc:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0); //Wait for ADC conversion to complete
     3be:	34 9b       	sbis	0x06, 4	; 6
     3c0:	fe cf       	rjmp	.-4      	; 0x3be <print_sensor+0x8>
 a=ADCH;
     3c2:	45 b1       	in	r20, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     3c4:	34 9a       	sbi	0x06, 4	; 6

// This Function prints the Analog Value Of Corresponding Channel No. at required Row
// and Coloumn Location. 
void print_sensor(char row, char coloumn,unsigned char channel)
{
 ADC_Value = ADC_Conversion(channel);
     3c6:	40 93 92 01 	sts	0x0192, r20
 lcd_print(row, coloumn, ADC_Value, 3);
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	23 e0       	ldi	r18, 0x03	; 3
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_print>
}
     3d4:	08 95       	ret

000003d6 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     3d6:	98 b3       	in	r25, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
     3d8:	90 7f       	andi	r25, 0xF0	; 240
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
     3da:	8f 70       	andi	r24, 0x0F	; 15
     3dc:	89 2b       	or	r24, r25
 PORTB = PortBRestore;      // setting the command to the port
     3de:	88 bb       	out	0x18, r24	; 24
}
     3e0:	08 95       	ret

000003e2 <forward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     3e2:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
     3e4:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
     3e6:	86 60       	ori	r24, 0x06	; 6
 PORTB = PortBRestore;      // setting the command to the port
     3e8:	88 bb       	out	0x18, r24	; 24
}

void forward (void) //both wheels forward
{
  motion_set(0x06);
}
     3ea:	08 95       	ret

000003ec <backward>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     3ec:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
     3ee:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
     3f0:	89 60       	ori	r24, 0x09	; 9
 PORTB = PortBRestore;      // setting the command to the port
     3f2:	88 bb       	out	0x18, r24	; 24
}

void backward (void)
{
  motion_set(0x09);
}
     3f4:	08 95       	ret

000003f6 <stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     3f6:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
     3f8:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
 PORTB = PortBRestore;      // setting the command to the port
     3fa:	88 bb       	out	0x18, r24	; 24
  motion_set(0x09);
}
void stop (void) //hard stop
{
  motion_set(0x00);
}
     3fc:	08 95       	ret

000003fe <hard_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     3fe:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
     400:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
     402:	85 60       	ori	r24, 0x05	; 5
 PORTB = PortBRestore;      // setting the command to the port
     404:	88 bb       	out	0x18, r24	; 24
}

void hard_left (void)            //Left wheel backward, Right wheel forward
{
  motion_set(0x05);
}
     406:	08 95       	ret

00000408 <hard_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     408:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
     40a:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
     40c:	8a 60       	ori	r24, 0x0A	; 10
 PORTB = PortBRestore;      // setting the command to the port
     40e:	88 bb       	out	0x18, r24	; 24
}

void hard_right (void)           //Left wheel forward, Right wheel backward
{   
  motion_set(0x0A);
}
     410:	08 95       	ret

00000412 <soft_left>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     412:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
     414:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
     416:	84 60       	ori	r24, 0x04	; 4
 PORTB = PortBRestore;      // setting the command to the port
     418:	88 bb       	out	0x18, r24	; 24
}

void soft_left (void)       //Left wheel stationary, Right wheel forward
{
 motion_set(0x04);
}
     41a:	08 95       	ret

0000041c <soft_right>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     41c:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
     41e:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
     420:	82 60       	ori	r24, 0x02	; 2
 PORTB = PortBRestore;      // setting the command to the port
     422:	88 bb       	out	0x18, r24	; 24
}

void soft_right (void)      //Left wheel forward, Right wheel is stationary
{ 
 motion_set(0x02);
}
     424:	08 95       	ret

00000426 <soft_left_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     426:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
     428:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
     42a:	81 60       	ori	r24, 0x01	; 1
 PORTB = PortBRestore;      // setting the command to the port
     42c:	88 bb       	out	0x18, r24	; 24
}

void soft_left_2 (void)     //Left wheel backward, right wheel stationary
{
 motion_set(0x01);
}
     42e:	08 95       	ret

00000430 <soft_right_2>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     430:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
     432:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
     434:	88 60       	ori	r24, 0x08	; 8
 PORTB = PortBRestore;      // setting the command to the port
     436:	88 bb       	out	0x18, r24	; 24
}

void soft_right_2 (void)    //Left wheel stationary, Right wheel backward
{
 motion_set(0x08);
}
     438:	08 95       	ret

0000043a <soft_stop>:
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     43a:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
     43c:	8f 60       	ori	r24, 0x0F	; 15
 PORTB = PortBRestore;      // setting the command to the port
     43e:	88 bb       	out	0x18, r24	; 24
}

void soft_stop (void)       //soft stop(stops solowly)
{
  motion_set(0x0F);
}
     440:	08 95       	ret

00000442 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR1AH = 0x00;
     442:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = left_motor;
     444:	8a bd       	out	0x2a, r24	; 42
 OCR1BH = 0x00;
     446:	19 bc       	out	0x29, r1	; 41
 OCR1BL = right_motor;
     448:	68 bd       	out	0x28, r22	; 40
}
     44a:	08 95       	ret

0000044c <init_devices>:

void init_devices (void)
{
  cli();          //Clears the global interrupts
     44c:	f8 94       	cli
  port_init();
     44e:	0e 94 a5 01 	call	0x34a	; 0x34a <port_init>
// WGM: 5) PWM 8bit fast, TOP=0x00FF
// desired value: 450Hz
// actual value: 450.000Hz (0.0%)
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     452:	1e bc       	out	0x2e, r1	; 46
 TCNT1H = 0xFF; //setup
     454:	9f ef       	ldi	r25, 0xFF	; 255
     456:	9d bd       	out	0x2d, r25	; 45
 TCNT1L = 0x01;
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	8c bd       	out	0x2c, r24	; 44
 OCR1AH = 0x00;
     45c:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = 0xFF;
     45e:	9a bd       	out	0x2a, r25	; 42
 OCR1BH = 0x00;
     460:	19 bc       	out	0x29, r1	; 41
 OCR1BL = 0xFF;
     462:	98 bd       	out	0x28, r25	; 40
 ICR1H  = 0x00;
     464:	17 bc       	out	0x27, r1	; 39
 ICR1L  = 0xFF;
     466:	96 bd       	out	0x26, r25	; 38
 TCCR1A = 0xA1;
     468:	81 ea       	ldi	r24, 0xA1	; 161
     46a:	8f bd       	out	0x2f, r24	; 47
 TCCR1B = 0x0D; //start Timer
     46c:	8d e0       	ldi	r24, 0x0D	; 13
     46e:	8e bd       	out	0x2e, r24	; 46


//Function to Initialize ADC
void adc_init()
{
 ADCSRA = 0x00;
     470:	16 b8       	out	0x06, r1	; 6
 ADMUX = 0x20;    //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     472:	80 e2       	ldi	r24, 0x20	; 32
     474:	87 b9       	out	0x07, r24	; 7
 ACSR = 0x80;
     476:	80 e8       	ldi	r24, 0x80	; 128
     478:	88 b9       	out	0x08, r24	; 8
 ADCSRA = 0x86;   //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     47a:	86 e8       	ldi	r24, 0x86	; 134
     47c:	86 b9       	out	0x06, r24	; 6
{
  cli();          //Clears the global interrupts
  port_init();
  timer1_init();
  adc_init();
  sei();          //Enables the global interrupts
     47e:	78 94       	sei
}
     480:	08 95       	ret

00000482 <main>:

//Main Function
int main(void) {
     482:	2f 92       	push	r2
     484:	6f 92       	push	r6
     486:	7f 92       	push	r7
     488:	8f 92       	push	r8
     48a:	9f 92       	push	r9
     48c:	af 92       	push	r10
     48e:	bf 92       	push	r11
     490:	cf 92       	push	r12
     492:	df 92       	push	r13
     494:	ef 92       	push	r14
     496:	ff 92       	push	r15
     498:	0f 93       	push	r16
     49a:	1f 93       	push	r17
     49c:	df 93       	push	r29
     49e:	cf 93       	push	r28
     4a0:	00 d0       	rcall	.+0      	; 0x4a2 <main+0x20>
     4a2:	00 d0       	rcall	.+0      	; 0x4a4 <main+0x22>
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
  unsigned char flag ;

  init_devices();
     4a8:	0e 94 26 02 	call	0x44c	; 0x44c <init_devices>

  lcd_set_4bit();
     4ac:	0e 94 49 00 	call	0x92	; 0x92 <lcd_set_4bit>
  lcd_init();
     4b0:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_init>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR1AH = 0x00;
     4b4:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = left_motor;
     4b6:	86 e9       	ldi	r24, 0x96	; 150
     4b8:	8a bd       	out	0x2a, r24	; 42
 OCR1BH = 0x00;
     4ba:	19 bc       	out	0x29, r1	; 41
 OCR1BL = right_motor;
     4bc:	88 bd       	out	0x28, r24	; 40
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     4be:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
     4c0:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
     4c2:	86 60       	ori	r24, 0x06	; 6
 PORTB = PortBRestore;      // setting the command to the port
     4c4:	88 bb       	out	0x18, r24	; 24

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR1AH = 0x00;
 OCR1AL = left_motor;
     4c6:	22 24       	eor	r2, r2
     4c8:	2a 94       	dec	r2
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;        
 ADMUX= 0x20| Ch;       
     4ca:	83 e2       	ldi	r24, 0x23	; 35
     4cc:	87 b9       	out	0x07, r24	; 7
 ADCSRA = ADCSRA | 0x40;  //Set start conversion bit
     4ce:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0); //Wait for ADC conversion to complete
     4d0:	34 9b       	sbis	0x06, 4	; 6
     4d2:	fe cf       	rjmp	.-4      	; 0x4d0 <main+0x4e>
 a=ADCH;
     4d4:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     4d6:	34 9a       	sbi	0x06, 4	; 6
  velocity(VELOCITY_MIN, VELOCITY_MIN);

  forward();
  int movement = 0;
  while(1) {
    left = ADC_Conversion(3);
     4d8:	80 93 6c 01 	sts	0x016C, r24
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;        
 ADMUX= 0x20| Ch;       
     4dc:	94 e2       	ldi	r25, 0x24	; 36
     4de:	97 b9       	out	0x07, r25	; 7
 ADCSRA = ADCSRA | 0x40;  //Set start conversion bit
     4e0:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0); //Wait for ADC conversion to complete
     4e2:	34 9b       	sbis	0x06, 4	; 6
     4e4:	fe cf       	rjmp	.-4      	; 0x4e2 <main+0x60>
 a=ADCH;
     4e6:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     4e8:	34 9a       	sbi	0x06, 4	; 6

  forward();
  int movement = 0;
  while(1) {
    left = ADC_Conversion(3);
    center = ADC_Conversion(4);
     4ea:	80 93 6d 01 	sts	0x016D, r24
//This Function accepts the Channel Number and returns the corresponding Analog Value 
unsigned char ADC_Conversion(unsigned char Ch)
{
 unsigned char a;
 Ch = Ch & 0x07;        
 ADMUX= 0x20| Ch;       
     4ee:	a5 e2       	ldi	r26, 0x25	; 37
     4f0:	a7 b9       	out	0x07, r26	; 7
 ADCSRA = ADCSRA | 0x40;  //Set start conversion bit
     4f2:	36 9a       	sbi	0x06, 6	; 6
 while((ADCSRA&0x10)==0); //Wait for ADC conversion to complete
     4f4:	34 9b       	sbis	0x06, 4	; 6
     4f6:	fe cf       	rjmp	.-4      	; 0x4f4 <main+0x72>
 a=ADCH;
     4f8:	85 b1       	in	r24, 0x05	; 5
 ADCSRA = ADCSRA|0x10;      //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     4fa:	34 9a       	sbi	0x06, 4	; 6
  forward();
  int movement = 0;
  while(1) {
    left = ADC_Conversion(3);
    center = ADC_Conversion(4);
    right = ADC_Conversion(5);
     4fc:	80 93 6e 01 	sts	0x016E, r24

    print_sensor(1,1,3);
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	61 e0       	ldi	r22, 0x01	; 1
     504:	43 e0       	ldi	r20, 0x03	; 3
     506:	0e 94 db 01 	call	0x3b6	; 0x3b6 <print_sensor>
    print_sensor(1,5,4);
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	65 e0       	ldi	r22, 0x05	; 5
     50e:	44 e0       	ldi	r20, 0x04	; 4
     510:	0e 94 db 01 	call	0x3b6	; 0x3b6 <print_sensor>
    print_sensor(1,9,5);
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	69 e0       	ldi	r22, 0x09	; 9
     518:	45 e0       	ldi	r20, 0x05	; 5
     51a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <print_sensor>

    // Printing threshold values

    error = left - right;
     51e:	60 91 6c 01 	lds	r22, 0x016C
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	20 91 6e 01 	lds	r18, 0x016E
     528:	62 1b       	sub	r22, r18
     52a:	71 09       	sbc	r23, r1
     52c:	88 27       	eor	r24, r24
     52e:	77 fd       	sbrc	r23, 7
     530:	80 95       	com	r24
     532:	98 2f       	mov	r25, r24
     534:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__floatsisf>
     538:	5b 01       	movw	r10, r22
     53a:	6c 01       	movw	r12, r24
     53c:	60 93 82 01 	sts	0x0182, r22
     540:	70 93 83 01 	sts	0x0183, r23
     544:	80 93 84 01 	sts	0x0184, r24
     548:	90 93 85 01 	sts	0x0185, r25
    diff = error - prev;
     54c:	20 91 7e 01 	lds	r18, 0x017E
     550:	30 91 7f 01 	lds	r19, 0x017F
     554:	40 91 80 01 	lds	r20, 0x0180
     558:	50 91 81 01 	lds	r21, 0x0181
     55c:	0e 94 55 05 	call	0xaaa	; 0xaaa <__subsf3>
     560:	3b 01       	movw	r6, r22
     562:	4c 01       	movw	r8, r24
     564:	60 93 8a 01 	sts	0x018A, r22
     568:	70 93 8b 01 	sts	0x018B, r23
     56c:	80 93 8c 01 	sts	0x018C, r24
     570:	90 93 8d 01 	sts	0x018D, r25
    output = kp*error + ki*integrate + kd*diff;
     574:	80 91 7a 01 	lds	r24, 0x017A
     578:	90 91 7b 01 	lds	r25, 0x017B
     57c:	a0 91 7c 01 	lds	r26, 0x017C
     580:	b0 91 7d 01 	lds	r27, 0x017D
     584:	89 83       	std	Y+1, r24	; 0x01
     586:	9a 83       	std	Y+2, r25	; 0x02
     588:	ab 83       	std	Y+3, r26	; 0x03
     58a:	bc 83       	std	Y+4, r27	; 0x04
     58c:	c6 01       	movw	r24, r12
     58e:	b5 01       	movw	r22, r10
     590:	20 91 60 00 	lds	r18, 0x0060
     594:	30 91 61 00 	lds	r19, 0x0061
     598:	40 91 62 00 	lds	r20, 0x0062
     59c:	50 91 63 00 	lds	r21, 0x0063
     5a0:	0e 94 b3 05 	call	0xb66	; 0xb66 <__mulsf3>
     5a4:	7b 01       	movw	r14, r22
     5a6:	8c 01       	movw	r16, r24
     5a8:	69 81       	ldd	r22, Y+1	; 0x01
     5aa:	7a 81       	ldd	r23, Y+2	; 0x02
     5ac:	8b 81       	ldd	r24, Y+3	; 0x03
     5ae:	9c 81       	ldd	r25, Y+4	; 0x04
     5b0:	20 91 72 01 	lds	r18, 0x0172
     5b4:	30 91 73 01 	lds	r19, 0x0173
     5b8:	40 91 74 01 	lds	r20, 0x0174
     5bc:	50 91 75 01 	lds	r21, 0x0175
     5c0:	0e 94 b3 05 	call	0xb66	; 0xb66 <__mulsf3>
     5c4:	9b 01       	movw	r18, r22
     5c6:	ac 01       	movw	r20, r24
     5c8:	c8 01       	movw	r24, r16
     5ca:	b7 01       	movw	r22, r14
     5cc:	0e 94 86 05 	call	0xb0c	; 0xb0c <__addsf3>
     5d0:	7b 01       	movw	r14, r22
     5d2:	8c 01       	movw	r16, r24
     5d4:	c4 01       	movw	r24, r8
     5d6:	b3 01       	movw	r22, r6
     5d8:	20 91 76 01 	lds	r18, 0x0176
     5dc:	30 91 77 01 	lds	r19, 0x0177
     5e0:	40 91 78 01 	lds	r20, 0x0178
     5e4:	50 91 79 01 	lds	r21, 0x0179
     5e8:	0e 94 b3 05 	call	0xb66	; 0xb66 <__mulsf3>
     5ec:	9b 01       	movw	r18, r22
     5ee:	ac 01       	movw	r20, r24
     5f0:	c8 01       	movw	r24, r16
     5f2:	b7 01       	movw	r22, r14
     5f4:	0e 94 86 05 	call	0xb0c	; 0xb0c <__addsf3>
     5f8:	60 93 86 01 	sts	0x0186, r22
     5fc:	70 93 87 01 	sts	0x0187, r23
     600:	80 93 88 01 	sts	0x0188, r24
     604:	90 93 89 01 	sts	0x0189, r25
    integrate += error;
     608:	69 81       	ldd	r22, Y+1	; 0x01
     60a:	7a 81       	ldd	r23, Y+2	; 0x02
     60c:	8b 81       	ldd	r24, Y+3	; 0x03
     60e:	9c 81       	ldd	r25, Y+4	; 0x04
     610:	a6 01       	movw	r20, r12
     612:	95 01       	movw	r18, r10
     614:	0e 94 86 05 	call	0xb0c	; 0xb0c <__addsf3>
     618:	60 93 7a 01 	sts	0x017A, r22
     61c:	70 93 7b 01 	sts	0x017B, r23
     620:	80 93 7c 01 	sts	0x017C, r24
     624:	90 93 7d 01 	sts	0x017D, r25
    prev = error;
     628:	a0 92 7e 01 	sts	0x017E, r10
     62c:	b0 92 7f 01 	sts	0x017F, r11
     630:	c0 92 80 01 	sts	0x0180, r12
     634:	d0 92 81 01 	sts	0x0181, r13
    lcd_cursor(2,8);
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	68 e0       	ldi	r22, 0x08	; 8
     63c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_cursor>
    lcd_wr_char('N');
     640:	8e e4       	ldi	r24, 0x4E	; 78
     642:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
    if (error > 0) {
     646:	60 91 82 01 	lds	r22, 0x0182
     64a:	70 91 83 01 	lds	r23, 0x0183
     64e:	80 91 84 01 	lds	r24, 0x0184
     652:	90 91 85 01 	lds	r25, 0x0185
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	40 e0       	ldi	r20, 0x00	; 0
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__gtsf2>
     662:	18 16       	cp	r1, r24
     664:	a4 f4       	brge	.+40     	; 0x68e <main+0x20c>
      lcd_cursor(2,1);
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	61 e0       	ldi	r22, 0x01	; 1
     66a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_cursor>
      lcd_wr_char('+');
     66e:	8b e2       	ldi	r24, 0x2B	; 43
     670:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
      lcd_print(2, 2, (int)output, 3);
     674:	60 91 86 01 	lds	r22, 0x0186
     678:	70 91 87 01 	lds	r23, 0x0187
     67c:	80 91 88 01 	lds	r24, 0x0188
     680:	90 91 89 01 	lds	r25, 0x0189
     684:	0e 94 6b 07 	call	0xed6	; 0xed6 <__fixsfsi>
     688:	9b 01       	movw	r18, r22
     68a:	ac 01       	movw	r20, r24
     68c:	16 c0       	rjmp	.+44     	; 0x6ba <main+0x238>
    } else {
      lcd_cursor(2,1);
     68e:	82 e0       	ldi	r24, 0x02	; 2
     690:	61 e0       	ldi	r22, 0x01	; 1
     692:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_cursor>
      lcd_wr_char('-');
     696:	8d e2       	ldi	r24, 0x2D	; 45
     698:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
      lcd_print(2, 2, -1*(int)output, 3);
     69c:	60 91 86 01 	lds	r22, 0x0186
     6a0:	70 91 87 01 	lds	r23, 0x0187
     6a4:	80 91 88 01 	lds	r24, 0x0188
     6a8:	90 91 89 01 	lds	r25, 0x0189
     6ac:	0e 94 6b 07 	call	0xed6	; 0xed6 <__fixsfsi>
     6b0:	9b 01       	movw	r18, r22
     6b2:	ac 01       	movw	r20, r24
     6b4:	30 95       	com	r19
     6b6:	21 95       	neg	r18
     6b8:	3f 4f       	sbci	r19, 0xFF	; 255
     6ba:	82 e0       	ldi	r24, 0x02	; 2
     6bc:	62 e0       	ldi	r22, 0x02	; 2
     6be:	a9 01       	movw	r20, r18
     6c0:	23 e0       	ldi	r18, 0x03	; 3
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_print>
    }

    if (left > 50 && right > 50 ) {
     6c8:	90 91 6c 01 	lds	r25, 0x016C
     6cc:	93 33       	cpi	r25, 0x33	; 51
     6ce:	28 f0       	brcs	.+10     	; 0x6da <main+0x258>
     6d0:	80 91 6e 01 	lds	r24, 0x016E
     6d4:	83 33       	cpi	r24, 0x33	; 51
     6d6:	08 f0       	brcs	.+2      	; 0x6da <main+0x258>
     6d8:	4e c0       	rjmp	.+156    	; 0x776 <main+0x2f4>
      velocity(255,255);
      forward();
    }
    else if (left < 50 && right < 50 && center < 50 
     6da:	92 33       	cpi	r25, 0x32	; 50
     6dc:	60 f5       	brcc	.+88     	; 0x736 <main+0x2b4>
     6de:	80 91 6e 01 	lds	r24, 0x016E
     6e2:	82 33       	cpi	r24, 0x32	; 50
     6e4:	40 f5       	brcc	.+80     	; 0x736 <main+0x2b4>
     6e6:	80 91 6d 01 	lds	r24, 0x016D
     6ea:	82 33       	cpi	r24, 0x32	; 50
     6ec:	20 f5       	brcc	.+72     	; 0x736 <main+0x2b4>
     6ee:	80 91 6f 01 	lds	r24, 0x016F
     6f2:	82 33       	cpi	r24, 0x32	; 50
     6f4:	00 f5       	brcc	.+64     	; 0x736 <main+0x2b4>
     6f6:	80 91 70 01 	lds	r24, 0x0170
     6fa:	82 33       	cpi	r24, 0x32	; 50
     6fc:	e0 f4       	brcc	.+56     	; 0x736 <main+0x2b4>
     6fe:	80 91 71 01 	lds	r24, 0x0171
     702:	83 33       	cpi	r24, 0x33	; 51
     704:	c0 f0       	brcs	.+48     	; 0x736 <main+0x2b4>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR1AH = 0x00;
     706:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = left_motor;
     708:	2a bc       	out	0x2a, r2	; 42
 OCR1BH = 0x00;
     70a:	19 bc       	out	0x29, r1	; 41
 OCR1BL = right_motor;
     70c:	28 bc       	out	0x28, r2	; 40
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     70e:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
     710:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
     712:	86 60       	ori	r24, 0x06	; 6
 PORTB = PortBRestore;      // setting the command to the port
     714:	88 bb       	out	0x18, r24	; 24
    }
    else if (left < 50 && right < 50 && center < 50 
             && prev_left < 50 && prev_right < 50 && prev_center > 50) {
        velocity(255, 255);
        forward();
        lcd_cursor(2,8);
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	68 e0       	ldi	r22, 0x08	; 8
     71a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <lcd_cursor>
        lcd_wr_char('D');
     71e:	84 e4       	ldi	r24, 0x44	; 68
     720:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_wr_char>
     724:	80 e2       	ldi	r24, 0x20	; 32
     726:	9e e4       	ldi	r25, 0x4E	; 78
     728:	e9 e1       	ldi	r30, 0x19	; 25
     72a:	f0 e0       	ldi	r31, 0x00	; 0
     72c:	31 97       	sbiw	r30, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <main+0x2aa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     730:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     732:	d1 f7       	brne	.-12     	; 0x728 <main+0x2a6>
     734:	61 c0       	rjmp	.+194    	; 0x7f8 <main+0x376>
        _delay_ms(2000);
    }
    else if (output > -50 && output < 50) {
     736:	e0 90 86 01 	lds	r14, 0x0186
     73a:	f0 90 87 01 	lds	r15, 0x0187
     73e:	00 91 88 01 	lds	r16, 0x0188
     742:	10 91 89 01 	lds	r17, 0x0189
     746:	c8 01       	movw	r24, r16
     748:	b7 01       	movw	r22, r14
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	48 e4       	ldi	r20, 0x48	; 72
     750:	52 ec       	ldi	r21, 0xC2	; 194
     752:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__gtsf2>
     756:	18 16       	cp	r1, r24
     758:	fc f4       	brge	.+62     	; 0x798 <main+0x316>
     75a:	c8 01       	movw	r24, r16
     75c:	b7 01       	movw	r22, r14
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	48 e4       	ldi	r20, 0x48	; 72
     764:	52 e4       	ldi	r21, 0x42	; 66
     766:	0e 94 dd 06 	call	0xdba	; 0xdba <__ltsf2>
     76a:	88 23       	and	r24, r24
     76c:	ac f4       	brge	.+42     	; 0x798 <main+0x316>
      if (center > 50) {
     76e:	80 91 6d 01 	lds	r24, 0x016D
     772:	83 33       	cpi	r24, 0x33	; 51
     774:	40 f0       	brcs	.+16     	; 0x786 <main+0x304>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR1AH = 0x00;
     776:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = left_motor;
     778:	2a bc       	out	0x2a, r2	; 42
 OCR1BH = 0x00;
     77a:	19 bc       	out	0x29, r1	; 41
 OCR1BL = right_motor;
     77c:	28 bc       	out	0x28, r2	; 40
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     77e:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
     780:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
     782:	86 60       	ori	r24, 0x06	; 6
     784:	38 c0       	rjmp	.+112    	; 0x7f6 <main+0x374>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR1AH = 0x00;
     786:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = left_motor;
     788:	9b e4       	ldi	r25, 0x4B	; 75
     78a:	9a bd       	out	0x2a, r25	; 42
 OCR1BH = 0x00;
     78c:	19 bc       	out	0x29, r1	; 41
 OCR1BL = right_motor;
     78e:	98 bd       	out	0x28, r25	; 40
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     790:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
     792:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
     794:	89 60       	ori	r24, 0x09	; 9
     796:	2f c0       	rjmp	.+94     	; 0x7f6 <main+0x374>
        // out of bounds, move backward
        velocity(75, 75);
        backward();
      }
    }
    else if (output > 50) {
     798:	c8 01       	movw	r24, r16
     79a:	b7 01       	movw	r22, r14
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	48 e4       	ldi	r20, 0x48	; 72
     7a2:	52 e4       	ldi	r21, 0x42	; 66
     7a4:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__gtsf2>
     7a8:	90 91 6d 01 	lds	r25, 0x016D
     7ac:	18 16       	cp	r1, r24
     7ae:	94 f4       	brge	.+36     	; 0x7d4 <main+0x352>
      
      if (center > 50) {
     7b0:	93 33       	cpi	r25, 0x33	; 51
     7b2:	40 f0       	brcs	.+16     	; 0x7c4 <main+0x342>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR1AH = 0x00;
     7b4:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = left_motor;
     7b6:	2a bc       	out	0x2a, r2	; 42
 OCR1BH = 0x00;
     7b8:	19 bc       	out	0x29, r1	; 41
 OCR1BL = right_motor;
     7ba:	28 bc       	out	0x28, r2	; 40
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     7bc:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
     7be:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
     7c0:	85 60       	ori	r24, 0x05	; 5
     7c2:	19 c0       	rjmp	.+50     	; 0x7f6 <main+0x374>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR1AH = 0x00;
     7c4:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = left_motor;
     7c6:	2a bc       	out	0x2a, r2	; 42
 OCR1BH = 0x00;
     7c8:	19 bc       	out	0x29, r1	; 41
 OCR1BL = right_motor;
     7ca:	28 bc       	out	0x28, r2	; 40
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     7cc:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
     7ce:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
     7d0:	84 60       	ori	r24, 0x04	; 4
     7d2:	11 c0       	rjmp	.+34     	; 0x7f6 <main+0x374>
        soft_left();
      }
    }
    else {
      
      if (center > 50) {
     7d4:	93 33       	cpi	r25, 0x33	; 51
     7d6:	40 f0       	brcs	.+16     	; 0x7e8 <main+0x366>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR1AH = 0x00;
     7d8:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = left_motor;
     7da:	2a bc       	out	0x2a, r2	; 42
 OCR1BH = 0x00;
     7dc:	19 bc       	out	0x29, r1	; 41
 OCR1BL = right_motor;
     7de:	28 bc       	out	0x28, r2	; 40
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     7e0:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
     7e2:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
     7e4:	8a 60       	ori	r24, 0x0A	; 10
     7e6:	07 c0       	rjmp	.+14     	; 0x7f6 <main+0x374>
}

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 OCR1AH = 0x00;
     7e8:	1b bc       	out	0x2b, r1	; 43
 OCR1AL = left_motor;
     7ea:	2a bc       	out	0x2a, r2	; 42
 OCR1BH = 0x00;
     7ec:	19 bc       	out	0x29, r1	; 41
 OCR1BL = right_motor;
     7ee:	28 bc       	out	0x28, r2	; 40
void motion_set (unsigned char Direction)
{
 unsigned char PortBRestore = 0;

 Direction &= 0x0F;       // removing upper nibbel as it is not needed
 PortBRestore = PORTB;      // reading the PORTB's original status
     7f0:	88 b3       	in	r24, 0x18	; 24
 PortBRestore &= 0xF0;      // setting lower direction nibbel to 0
     7f2:	80 7f       	andi	r24, 0xF0	; 240
 PortBRestore |= Direction;   // adding lower nibbel for direction command and restoring the PORTB status
     7f4:	82 60       	ori	r24, 0x02	; 2
 PORTB = PortBRestore;      // setting the command to the port
     7f6:	88 bb       	out	0x18, r24	; 24
      } else {
        velocity(255, 255);
        soft_right();
      }
    }
    prev_right = right;
     7f8:	80 91 6e 01 	lds	r24, 0x016E
     7fc:	80 93 70 01 	sts	0x0170, r24
    prev_left = left;
     800:	80 91 6c 01 	lds	r24, 0x016C
     804:	80 93 6f 01 	sts	0x016F, r24
    prev_center = center;
     808:	80 91 6d 01 	lds	r24, 0x016D
     80c:	80 93 71 01 	sts	0x0171, r24
     810:	5c ce       	rjmp	.-840    	; 0x4ca <main+0x48>

00000812 <_fpadd_parts>:
     812:	a0 e0       	ldi	r26, 0x00	; 0
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	ef e0       	ldi	r30, 0x0F	; 15
     818:	f4 e0       	ldi	r31, 0x04	; 4
     81a:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <__prologue_saves__>
     81e:	dc 01       	movw	r26, r24
     820:	2b 01       	movw	r4, r22
     822:	fa 01       	movw	r30, r20
     824:	9c 91       	ld	r25, X
     826:	92 30       	cpi	r25, 0x02	; 2
     828:	08 f4       	brcc	.+2      	; 0x82c <_fpadd_parts+0x1a>
     82a:	39 c1       	rjmp	.+626    	; 0xa9e <_fpadd_parts+0x28c>
     82c:	eb 01       	movw	r28, r22
     82e:	88 81       	ld	r24, Y
     830:	82 30       	cpi	r24, 0x02	; 2
     832:	08 f4       	brcc	.+2      	; 0x836 <_fpadd_parts+0x24>
     834:	33 c1       	rjmp	.+614    	; 0xa9c <_fpadd_parts+0x28a>
     836:	94 30       	cpi	r25, 0x04	; 4
     838:	69 f4       	brne	.+26     	; 0x854 <_fpadd_parts+0x42>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	09 f0       	breq	.+2      	; 0x840 <_fpadd_parts+0x2e>
     83e:	2f c1       	rjmp	.+606    	; 0xa9e <_fpadd_parts+0x28c>
     840:	11 96       	adiw	r26, 0x01	; 1
     842:	9c 91       	ld	r25, X
     844:	11 97       	sbiw	r26, 0x01	; 1
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	98 17       	cp	r25, r24
     84a:	09 f4       	brne	.+2      	; 0x84e <_fpadd_parts+0x3c>
     84c:	28 c1       	rjmp	.+592    	; 0xa9e <_fpadd_parts+0x28c>
     84e:	a4 e6       	ldi	r26, 0x64	; 100
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	25 c1       	rjmp	.+586    	; 0xa9e <_fpadd_parts+0x28c>
     854:	84 30       	cpi	r24, 0x04	; 4
     856:	09 f4       	brne	.+2      	; 0x85a <_fpadd_parts+0x48>
     858:	21 c1       	rjmp	.+578    	; 0xa9c <_fpadd_parts+0x28a>
     85a:	82 30       	cpi	r24, 0x02	; 2
     85c:	a9 f4       	brne	.+42     	; 0x888 <_fpadd_parts+0x76>
     85e:	92 30       	cpi	r25, 0x02	; 2
     860:	09 f0       	breq	.+2      	; 0x864 <_fpadd_parts+0x52>
     862:	1d c1       	rjmp	.+570    	; 0xa9e <_fpadd_parts+0x28c>
     864:	9a 01       	movw	r18, r20
     866:	ad 01       	movw	r20, r26
     868:	88 e0       	ldi	r24, 0x08	; 8
     86a:	ea 01       	movw	r28, r20
     86c:	09 90       	ld	r0, Y+
     86e:	ae 01       	movw	r20, r28
     870:	e9 01       	movw	r28, r18
     872:	09 92       	st	Y+, r0
     874:	9e 01       	movw	r18, r28
     876:	81 50       	subi	r24, 0x01	; 1
     878:	c1 f7       	brne	.-16     	; 0x86a <_fpadd_parts+0x58>
     87a:	e2 01       	movw	r28, r4
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	11 96       	adiw	r26, 0x01	; 1
     880:	9c 91       	ld	r25, X
     882:	89 23       	and	r24, r25
     884:	81 83       	std	Z+1, r24	; 0x01
     886:	08 c1       	rjmp	.+528    	; 0xa98 <_fpadd_parts+0x286>
     888:	92 30       	cpi	r25, 0x02	; 2
     88a:	09 f4       	brne	.+2      	; 0x88e <_fpadd_parts+0x7c>
     88c:	07 c1       	rjmp	.+526    	; 0xa9c <_fpadd_parts+0x28a>
     88e:	12 96       	adiw	r26, 0x02	; 2
     890:	2d 90       	ld	r2, X+
     892:	3c 90       	ld	r3, X
     894:	13 97       	sbiw	r26, 0x03	; 3
     896:	eb 01       	movw	r28, r22
     898:	8a 81       	ldd	r24, Y+2	; 0x02
     89a:	9b 81       	ldd	r25, Y+3	; 0x03
     89c:	14 96       	adiw	r26, 0x04	; 4
     89e:	ad 90       	ld	r10, X+
     8a0:	bd 90       	ld	r11, X+
     8a2:	cd 90       	ld	r12, X+
     8a4:	dc 90       	ld	r13, X
     8a6:	17 97       	sbiw	r26, 0x07	; 7
     8a8:	ec 80       	ldd	r14, Y+4	; 0x04
     8aa:	fd 80       	ldd	r15, Y+5	; 0x05
     8ac:	0e 81       	ldd	r16, Y+6	; 0x06
     8ae:	1f 81       	ldd	r17, Y+7	; 0x07
     8b0:	91 01       	movw	r18, r2
     8b2:	28 1b       	sub	r18, r24
     8b4:	39 0b       	sbc	r19, r25
     8b6:	b9 01       	movw	r22, r18
     8b8:	37 ff       	sbrs	r19, 7
     8ba:	04 c0       	rjmp	.+8      	; 0x8c4 <_fpadd_parts+0xb2>
     8bc:	66 27       	eor	r22, r22
     8be:	77 27       	eor	r23, r23
     8c0:	62 1b       	sub	r22, r18
     8c2:	73 0b       	sbc	r23, r19
     8c4:	60 32       	cpi	r22, 0x20	; 32
     8c6:	71 05       	cpc	r23, r1
     8c8:	0c f0       	brlt	.+2      	; 0x8cc <_fpadd_parts+0xba>
     8ca:	61 c0       	rjmp	.+194    	; 0x98e <_fpadd_parts+0x17c>
     8cc:	12 16       	cp	r1, r18
     8ce:	13 06       	cpc	r1, r19
     8d0:	6c f5       	brge	.+90     	; 0x92c <_fpadd_parts+0x11a>
     8d2:	37 01       	movw	r6, r14
     8d4:	48 01       	movw	r8, r16
     8d6:	06 2e       	mov	r0, r22
     8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <_fpadd_parts+0xd0>
     8da:	96 94       	lsr	r9
     8dc:	87 94       	ror	r8
     8de:	77 94       	ror	r7
     8e0:	67 94       	ror	r6
     8e2:	0a 94       	dec	r0
     8e4:	d2 f7       	brpl	.-12     	; 0x8da <_fpadd_parts+0xc8>
     8e6:	21 e0       	ldi	r18, 0x01	; 1
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	40 e0       	ldi	r20, 0x00	; 0
     8ec:	50 e0       	ldi	r21, 0x00	; 0
     8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <_fpadd_parts+0xe6>
     8f0:	22 0f       	add	r18, r18
     8f2:	33 1f       	adc	r19, r19
     8f4:	44 1f       	adc	r20, r20
     8f6:	55 1f       	adc	r21, r21
     8f8:	6a 95       	dec	r22
     8fa:	d2 f7       	brpl	.-12     	; 0x8f0 <_fpadd_parts+0xde>
     8fc:	21 50       	subi	r18, 0x01	; 1
     8fe:	30 40       	sbci	r19, 0x00	; 0
     900:	40 40       	sbci	r20, 0x00	; 0
     902:	50 40       	sbci	r21, 0x00	; 0
     904:	2e 21       	and	r18, r14
     906:	3f 21       	and	r19, r15
     908:	40 23       	and	r20, r16
     90a:	51 23       	and	r21, r17
     90c:	21 15       	cp	r18, r1
     90e:	31 05       	cpc	r19, r1
     910:	41 05       	cpc	r20, r1
     912:	51 05       	cpc	r21, r1
     914:	21 f0       	breq	.+8      	; 0x91e <_fpadd_parts+0x10c>
     916:	21 e0       	ldi	r18, 0x01	; 1
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	40 e0       	ldi	r20, 0x00	; 0
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	79 01       	movw	r14, r18
     920:	8a 01       	movw	r16, r20
     922:	e6 28       	or	r14, r6
     924:	f7 28       	or	r15, r7
     926:	08 29       	or	r16, r8
     928:	19 29       	or	r17, r9
     92a:	3c c0       	rjmp	.+120    	; 0x9a4 <_fpadd_parts+0x192>
     92c:	23 2b       	or	r18, r19
     92e:	d1 f1       	breq	.+116    	; 0x9a4 <_fpadd_parts+0x192>
     930:	26 0e       	add	r2, r22
     932:	37 1e       	adc	r3, r23
     934:	35 01       	movw	r6, r10
     936:	46 01       	movw	r8, r12
     938:	06 2e       	mov	r0, r22
     93a:	04 c0       	rjmp	.+8      	; 0x944 <_fpadd_parts+0x132>
     93c:	96 94       	lsr	r9
     93e:	87 94       	ror	r8
     940:	77 94       	ror	r7
     942:	67 94       	ror	r6
     944:	0a 94       	dec	r0
     946:	d2 f7       	brpl	.-12     	; 0x93c <_fpadd_parts+0x12a>
     948:	21 e0       	ldi	r18, 0x01	; 1
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	40 e0       	ldi	r20, 0x00	; 0
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	04 c0       	rjmp	.+8      	; 0x95a <_fpadd_parts+0x148>
     952:	22 0f       	add	r18, r18
     954:	33 1f       	adc	r19, r19
     956:	44 1f       	adc	r20, r20
     958:	55 1f       	adc	r21, r21
     95a:	6a 95       	dec	r22
     95c:	d2 f7       	brpl	.-12     	; 0x952 <_fpadd_parts+0x140>
     95e:	21 50       	subi	r18, 0x01	; 1
     960:	30 40       	sbci	r19, 0x00	; 0
     962:	40 40       	sbci	r20, 0x00	; 0
     964:	50 40       	sbci	r21, 0x00	; 0
     966:	2a 21       	and	r18, r10
     968:	3b 21       	and	r19, r11
     96a:	4c 21       	and	r20, r12
     96c:	5d 21       	and	r21, r13
     96e:	21 15       	cp	r18, r1
     970:	31 05       	cpc	r19, r1
     972:	41 05       	cpc	r20, r1
     974:	51 05       	cpc	r21, r1
     976:	21 f0       	breq	.+8      	; 0x980 <_fpadd_parts+0x16e>
     978:	21 e0       	ldi	r18, 0x01	; 1
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	40 e0       	ldi	r20, 0x00	; 0
     97e:	50 e0       	ldi	r21, 0x00	; 0
     980:	59 01       	movw	r10, r18
     982:	6a 01       	movw	r12, r20
     984:	a6 28       	or	r10, r6
     986:	b7 28       	or	r11, r7
     988:	c8 28       	or	r12, r8
     98a:	d9 28       	or	r13, r9
     98c:	0b c0       	rjmp	.+22     	; 0x9a4 <_fpadd_parts+0x192>
     98e:	82 15       	cp	r24, r2
     990:	93 05       	cpc	r25, r3
     992:	2c f0       	brlt	.+10     	; 0x99e <_fpadd_parts+0x18c>
     994:	1c 01       	movw	r2, r24
     996:	aa 24       	eor	r10, r10
     998:	bb 24       	eor	r11, r11
     99a:	65 01       	movw	r12, r10
     99c:	03 c0       	rjmp	.+6      	; 0x9a4 <_fpadd_parts+0x192>
     99e:	ee 24       	eor	r14, r14
     9a0:	ff 24       	eor	r15, r15
     9a2:	87 01       	movw	r16, r14
     9a4:	11 96       	adiw	r26, 0x01	; 1
     9a6:	9c 91       	ld	r25, X
     9a8:	d2 01       	movw	r26, r4
     9aa:	11 96       	adiw	r26, 0x01	; 1
     9ac:	8c 91       	ld	r24, X
     9ae:	98 17       	cp	r25, r24
     9b0:	09 f4       	brne	.+2      	; 0x9b4 <_fpadd_parts+0x1a2>
     9b2:	45 c0       	rjmp	.+138    	; 0xa3e <_fpadd_parts+0x22c>
     9b4:	99 23       	and	r25, r25
     9b6:	39 f0       	breq	.+14     	; 0x9c6 <_fpadd_parts+0x1b4>
     9b8:	a8 01       	movw	r20, r16
     9ba:	97 01       	movw	r18, r14
     9bc:	2a 19       	sub	r18, r10
     9be:	3b 09       	sbc	r19, r11
     9c0:	4c 09       	sbc	r20, r12
     9c2:	5d 09       	sbc	r21, r13
     9c4:	06 c0       	rjmp	.+12     	; 0x9d2 <_fpadd_parts+0x1c0>
     9c6:	a6 01       	movw	r20, r12
     9c8:	95 01       	movw	r18, r10
     9ca:	2e 19       	sub	r18, r14
     9cc:	3f 09       	sbc	r19, r15
     9ce:	40 0b       	sbc	r20, r16
     9d0:	51 0b       	sbc	r21, r17
     9d2:	57 fd       	sbrc	r21, 7
     9d4:	08 c0       	rjmp	.+16     	; 0x9e6 <_fpadd_parts+0x1d4>
     9d6:	11 82       	std	Z+1, r1	; 0x01
     9d8:	33 82       	std	Z+3, r3	; 0x03
     9da:	22 82       	std	Z+2, r2	; 0x02
     9dc:	24 83       	std	Z+4, r18	; 0x04
     9de:	35 83       	std	Z+5, r19	; 0x05
     9e0:	46 83       	std	Z+6, r20	; 0x06
     9e2:	57 83       	std	Z+7, r21	; 0x07
     9e4:	1d c0       	rjmp	.+58     	; 0xa20 <_fpadd_parts+0x20e>
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	81 83       	std	Z+1, r24	; 0x01
     9ea:	33 82       	std	Z+3, r3	; 0x03
     9ec:	22 82       	std	Z+2, r2	; 0x02
     9ee:	88 27       	eor	r24, r24
     9f0:	99 27       	eor	r25, r25
     9f2:	dc 01       	movw	r26, r24
     9f4:	82 1b       	sub	r24, r18
     9f6:	93 0b       	sbc	r25, r19
     9f8:	a4 0b       	sbc	r26, r20
     9fa:	b5 0b       	sbc	r27, r21
     9fc:	84 83       	std	Z+4, r24	; 0x04
     9fe:	95 83       	std	Z+5, r25	; 0x05
     a00:	a6 83       	std	Z+6, r26	; 0x06
     a02:	b7 83       	std	Z+7, r27	; 0x07
     a04:	0d c0       	rjmp	.+26     	; 0xa20 <_fpadd_parts+0x20e>
     a06:	22 0f       	add	r18, r18
     a08:	33 1f       	adc	r19, r19
     a0a:	44 1f       	adc	r20, r20
     a0c:	55 1f       	adc	r21, r21
     a0e:	24 83       	std	Z+4, r18	; 0x04
     a10:	35 83       	std	Z+5, r19	; 0x05
     a12:	46 83       	std	Z+6, r20	; 0x06
     a14:	57 83       	std	Z+7, r21	; 0x07
     a16:	82 81       	ldd	r24, Z+2	; 0x02
     a18:	93 81       	ldd	r25, Z+3	; 0x03
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	93 83       	std	Z+3, r25	; 0x03
     a1e:	82 83       	std	Z+2, r24	; 0x02
     a20:	24 81       	ldd	r18, Z+4	; 0x04
     a22:	35 81       	ldd	r19, Z+5	; 0x05
     a24:	46 81       	ldd	r20, Z+6	; 0x06
     a26:	57 81       	ldd	r21, Z+7	; 0x07
     a28:	da 01       	movw	r26, r20
     a2a:	c9 01       	movw	r24, r18
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	a1 09       	sbc	r26, r1
     a30:	b1 09       	sbc	r27, r1
     a32:	8f 5f       	subi	r24, 0xFF	; 255
     a34:	9f 4f       	sbci	r25, 0xFF	; 255
     a36:	af 4f       	sbci	r26, 0xFF	; 255
     a38:	bf 43       	sbci	r27, 0x3F	; 63
     a3a:	28 f3       	brcs	.-54     	; 0xa06 <_fpadd_parts+0x1f4>
     a3c:	0b c0       	rjmp	.+22     	; 0xa54 <_fpadd_parts+0x242>
     a3e:	91 83       	std	Z+1, r25	; 0x01
     a40:	33 82       	std	Z+3, r3	; 0x03
     a42:	22 82       	std	Z+2, r2	; 0x02
     a44:	ea 0c       	add	r14, r10
     a46:	fb 1c       	adc	r15, r11
     a48:	0c 1d       	adc	r16, r12
     a4a:	1d 1d       	adc	r17, r13
     a4c:	e4 82       	std	Z+4, r14	; 0x04
     a4e:	f5 82       	std	Z+5, r15	; 0x05
     a50:	06 83       	std	Z+6, r16	; 0x06
     a52:	17 83       	std	Z+7, r17	; 0x07
     a54:	83 e0       	ldi	r24, 0x03	; 3
     a56:	80 83       	st	Z, r24
     a58:	24 81       	ldd	r18, Z+4	; 0x04
     a5a:	35 81       	ldd	r19, Z+5	; 0x05
     a5c:	46 81       	ldd	r20, Z+6	; 0x06
     a5e:	57 81       	ldd	r21, Z+7	; 0x07
     a60:	57 ff       	sbrs	r21, 7
     a62:	1a c0       	rjmp	.+52     	; 0xa98 <_fpadd_parts+0x286>
     a64:	c9 01       	movw	r24, r18
     a66:	aa 27       	eor	r26, r26
     a68:	97 fd       	sbrc	r25, 7
     a6a:	a0 95       	com	r26
     a6c:	ba 2f       	mov	r27, r26
     a6e:	81 70       	andi	r24, 0x01	; 1
     a70:	90 70       	andi	r25, 0x00	; 0
     a72:	a0 70       	andi	r26, 0x00	; 0
     a74:	b0 70       	andi	r27, 0x00	; 0
     a76:	56 95       	lsr	r21
     a78:	47 95       	ror	r20
     a7a:	37 95       	ror	r19
     a7c:	27 95       	ror	r18
     a7e:	82 2b       	or	r24, r18
     a80:	93 2b       	or	r25, r19
     a82:	a4 2b       	or	r26, r20
     a84:	b5 2b       	or	r27, r21
     a86:	84 83       	std	Z+4, r24	; 0x04
     a88:	95 83       	std	Z+5, r25	; 0x05
     a8a:	a6 83       	std	Z+6, r26	; 0x06
     a8c:	b7 83       	std	Z+7, r27	; 0x07
     a8e:	82 81       	ldd	r24, Z+2	; 0x02
     a90:	93 81       	ldd	r25, Z+3	; 0x03
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	93 83       	std	Z+3, r25	; 0x03
     a96:	82 83       	std	Z+2, r24	; 0x02
     a98:	df 01       	movw	r26, r30
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <_fpadd_parts+0x28c>
     a9c:	d2 01       	movw	r26, r4
     a9e:	cd 01       	movw	r24, r26
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	e2 e1       	ldi	r30, 0x12	; 18
     aa6:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__epilogue_restores__>

00000aaa <__subsf3>:
     aaa:	a0 e2       	ldi	r26, 0x20	; 32
     aac:	b0 e0       	ldi	r27, 0x00	; 0
     aae:	eb e5       	ldi	r30, 0x5B	; 91
     ab0:	f5 e0       	ldi	r31, 0x05	; 5
     ab2:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__prologue_saves__+0x18>
     ab6:	69 83       	std	Y+1, r22	; 0x01
     ab8:	7a 83       	std	Y+2, r23	; 0x02
     aba:	8b 83       	std	Y+3, r24	; 0x03
     abc:	9c 83       	std	Y+4, r25	; 0x04
     abe:	2d 83       	std	Y+5, r18	; 0x05
     ac0:	3e 83       	std	Y+6, r19	; 0x06
     ac2:	4f 83       	std	Y+7, r20	; 0x07
     ac4:	58 87       	std	Y+8, r21	; 0x08
     ac6:	e9 e0       	ldi	r30, 0x09	; 9
     ac8:	ee 2e       	mov	r14, r30
     aca:	f1 2c       	mov	r15, r1
     acc:	ec 0e       	add	r14, r28
     ace:	fd 1e       	adc	r15, r29
     ad0:	ce 01       	movw	r24, r28
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	b7 01       	movw	r22, r14
     ad6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__unpack_f>
     ada:	8e 01       	movw	r16, r28
     adc:	0f 5e       	subi	r16, 0xEF	; 239
     ade:	1f 4f       	sbci	r17, 0xFF	; 255
     ae0:	ce 01       	movw	r24, r28
     ae2:	05 96       	adiw	r24, 0x05	; 5
     ae4:	b8 01       	movw	r22, r16
     ae6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__unpack_f>
     aea:	8a 89       	ldd	r24, Y+18	; 0x12
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	89 27       	eor	r24, r25
     af0:	8a 8b       	std	Y+18, r24	; 0x12
     af2:	c7 01       	movw	r24, r14
     af4:	b8 01       	movw	r22, r16
     af6:	ae 01       	movw	r20, r28
     af8:	47 5e       	subi	r20, 0xE7	; 231
     afa:	5f 4f       	sbci	r21, 0xFF	; 255
     afc:	0e 94 09 04 	call	0x812	; 0x812 <_fpadd_parts>
     b00:	0e 94 0e 08 	call	0x101c	; 0x101c <__pack_f>
     b04:	a0 96       	adiw	r28, 0x20	; 32
     b06:	e6 e0       	ldi	r30, 0x06	; 6
     b08:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__epilogue_restores__+0x18>

00000b0c <__addsf3>:
     b0c:	a0 e2       	ldi	r26, 0x20	; 32
     b0e:	b0 e0       	ldi	r27, 0x00	; 0
     b10:	ec e8       	ldi	r30, 0x8C	; 140
     b12:	f5 e0       	ldi	r31, 0x05	; 5
     b14:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__prologue_saves__+0x18>
     b18:	69 83       	std	Y+1, r22	; 0x01
     b1a:	7a 83       	std	Y+2, r23	; 0x02
     b1c:	8b 83       	std	Y+3, r24	; 0x03
     b1e:	9c 83       	std	Y+4, r25	; 0x04
     b20:	2d 83       	std	Y+5, r18	; 0x05
     b22:	3e 83       	std	Y+6, r19	; 0x06
     b24:	4f 83       	std	Y+7, r20	; 0x07
     b26:	58 87       	std	Y+8, r21	; 0x08
     b28:	f9 e0       	ldi	r31, 0x09	; 9
     b2a:	ef 2e       	mov	r14, r31
     b2c:	f1 2c       	mov	r15, r1
     b2e:	ec 0e       	add	r14, r28
     b30:	fd 1e       	adc	r15, r29
     b32:	ce 01       	movw	r24, r28
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	b7 01       	movw	r22, r14
     b38:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__unpack_f>
     b3c:	8e 01       	movw	r16, r28
     b3e:	0f 5e       	subi	r16, 0xEF	; 239
     b40:	1f 4f       	sbci	r17, 0xFF	; 255
     b42:	ce 01       	movw	r24, r28
     b44:	05 96       	adiw	r24, 0x05	; 5
     b46:	b8 01       	movw	r22, r16
     b48:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__unpack_f>
     b4c:	c7 01       	movw	r24, r14
     b4e:	b8 01       	movw	r22, r16
     b50:	ae 01       	movw	r20, r28
     b52:	47 5e       	subi	r20, 0xE7	; 231
     b54:	5f 4f       	sbci	r21, 0xFF	; 255
     b56:	0e 94 09 04 	call	0x812	; 0x812 <_fpadd_parts>
     b5a:	0e 94 0e 08 	call	0x101c	; 0x101c <__pack_f>
     b5e:	a0 96       	adiw	r28, 0x20	; 32
     b60:	e6 e0       	ldi	r30, 0x06	; 6
     b62:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__epilogue_restores__+0x18>

00000b66 <__mulsf3>:
     b66:	a0 e2       	ldi	r26, 0x20	; 32
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e9 eb       	ldi	r30, 0xB9	; 185
     b6c:	f5 e0       	ldi	r31, 0x05	; 5
     b6e:	0c 94 c8 09 	jmp	0x1390	; 0x1390 <__prologue_saves__>
     b72:	69 83       	std	Y+1, r22	; 0x01
     b74:	7a 83       	std	Y+2, r23	; 0x02
     b76:	8b 83       	std	Y+3, r24	; 0x03
     b78:	9c 83       	std	Y+4, r25	; 0x04
     b7a:	2d 83       	std	Y+5, r18	; 0x05
     b7c:	3e 83       	std	Y+6, r19	; 0x06
     b7e:	4f 83       	std	Y+7, r20	; 0x07
     b80:	58 87       	std	Y+8, r21	; 0x08
     b82:	ce 01       	movw	r24, r28
     b84:	01 96       	adiw	r24, 0x01	; 1
     b86:	be 01       	movw	r22, r28
     b88:	67 5f       	subi	r22, 0xF7	; 247
     b8a:	7f 4f       	sbci	r23, 0xFF	; 255
     b8c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__unpack_f>
     b90:	ce 01       	movw	r24, r28
     b92:	05 96       	adiw	r24, 0x05	; 5
     b94:	be 01       	movw	r22, r28
     b96:	6f 5e       	subi	r22, 0xEF	; 239
     b98:	7f 4f       	sbci	r23, 0xFF	; 255
     b9a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__unpack_f>
     b9e:	99 85       	ldd	r25, Y+9	; 0x09
     ba0:	92 30       	cpi	r25, 0x02	; 2
     ba2:	88 f0       	brcs	.+34     	; 0xbc6 <__mulsf3+0x60>
     ba4:	89 89       	ldd	r24, Y+17	; 0x11
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	c8 f0       	brcs	.+50     	; 0xbdc <__mulsf3+0x76>
     baa:	94 30       	cpi	r25, 0x04	; 4
     bac:	19 f4       	brne	.+6      	; 0xbb4 <__mulsf3+0x4e>
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	51 f4       	brne	.+20     	; 0xbc6 <__mulsf3+0x60>
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__mulsf3+0x56>
     bb4:	84 30       	cpi	r24, 0x04	; 4
     bb6:	29 f4       	brne	.+10     	; 0xbc2 <__mulsf3+0x5c>
     bb8:	92 30       	cpi	r25, 0x02	; 2
     bba:	81 f4       	brne	.+32     	; 0xbdc <__mulsf3+0x76>
     bbc:	84 e6       	ldi	r24, 0x64	; 100
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	c6 c0       	rjmp	.+396    	; 0xd4e <__mulsf3+0x1e8>
     bc2:	92 30       	cpi	r25, 0x02	; 2
     bc4:	49 f4       	brne	.+18     	; 0xbd8 <__mulsf3+0x72>
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bca:	8a 89       	ldd	r24, Y+18	; 0x12
     bcc:	98 13       	cpse	r25, r24
     bce:	21 e0       	ldi	r18, 0x01	; 1
     bd0:	2a 87       	std	Y+10, r18	; 0x0a
     bd2:	ce 01       	movw	r24, r28
     bd4:	09 96       	adiw	r24, 0x09	; 9
     bd6:	bb c0       	rjmp	.+374    	; 0xd4e <__mulsf3+0x1e8>
     bd8:	82 30       	cpi	r24, 0x02	; 2
     bda:	49 f4       	brne	.+18     	; 0xbee <__mulsf3+0x88>
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	9a 85       	ldd	r25, Y+10	; 0x0a
     be0:	8a 89       	ldd	r24, Y+18	; 0x12
     be2:	98 13       	cpse	r25, r24
     be4:	21 e0       	ldi	r18, 0x01	; 1
     be6:	2a 8b       	std	Y+18, r18	; 0x12
     be8:	ce 01       	movw	r24, r28
     bea:	41 96       	adiw	r24, 0x11	; 17
     bec:	b0 c0       	rjmp	.+352    	; 0xd4e <__mulsf3+0x1e8>
     bee:	2d 84       	ldd	r2, Y+13	; 0x0d
     bf0:	3e 84       	ldd	r3, Y+14	; 0x0e
     bf2:	4f 84       	ldd	r4, Y+15	; 0x0f
     bf4:	58 88       	ldd	r5, Y+16	; 0x10
     bf6:	6d 88       	ldd	r6, Y+21	; 0x15
     bf8:	7e 88       	ldd	r7, Y+22	; 0x16
     bfa:	8f 88       	ldd	r8, Y+23	; 0x17
     bfc:	98 8c       	ldd	r9, Y+24	; 0x18
     bfe:	ee 24       	eor	r14, r14
     c00:	ff 24       	eor	r15, r15
     c02:	87 01       	movw	r16, r14
     c04:	aa 24       	eor	r10, r10
     c06:	bb 24       	eor	r11, r11
     c08:	65 01       	movw	r12, r10
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	50 e0       	ldi	r21, 0x00	; 0
     c0e:	60 e0       	ldi	r22, 0x00	; 0
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	e0 e0       	ldi	r30, 0x00	; 0
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	c1 01       	movw	r24, r2
     c18:	81 70       	andi	r24, 0x01	; 1
     c1a:	90 70       	andi	r25, 0x00	; 0
     c1c:	89 2b       	or	r24, r25
     c1e:	e9 f0       	breq	.+58     	; 0xc5a <__mulsf3+0xf4>
     c20:	e6 0c       	add	r14, r6
     c22:	f7 1c       	adc	r15, r7
     c24:	08 1d       	adc	r16, r8
     c26:	19 1d       	adc	r17, r9
     c28:	9a 01       	movw	r18, r20
     c2a:	ab 01       	movw	r20, r22
     c2c:	2a 0d       	add	r18, r10
     c2e:	3b 1d       	adc	r19, r11
     c30:	4c 1d       	adc	r20, r12
     c32:	5d 1d       	adc	r21, r13
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	a0 e0       	ldi	r26, 0x00	; 0
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e6 14       	cp	r14, r6
     c3e:	f7 04       	cpc	r15, r7
     c40:	08 05       	cpc	r16, r8
     c42:	19 05       	cpc	r17, r9
     c44:	20 f4       	brcc	.+8      	; 0xc4e <__mulsf3+0xe8>
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	ba 01       	movw	r22, r20
     c50:	a9 01       	movw	r20, r18
     c52:	48 0f       	add	r20, r24
     c54:	59 1f       	adc	r21, r25
     c56:	6a 1f       	adc	r22, r26
     c58:	7b 1f       	adc	r23, r27
     c5a:	aa 0c       	add	r10, r10
     c5c:	bb 1c       	adc	r11, r11
     c5e:	cc 1c       	adc	r12, r12
     c60:	dd 1c       	adc	r13, r13
     c62:	97 fe       	sbrs	r9, 7
     c64:	08 c0       	rjmp	.+16     	; 0xc76 <__mulsf3+0x110>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	a0 e0       	ldi	r26, 0x00	; 0
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	a8 2a       	or	r10, r24
     c70:	b9 2a       	or	r11, r25
     c72:	ca 2a       	or	r12, r26
     c74:	db 2a       	or	r13, r27
     c76:	31 96       	adiw	r30, 0x01	; 1
     c78:	e0 32       	cpi	r30, 0x20	; 32
     c7a:	f1 05       	cpc	r31, r1
     c7c:	49 f0       	breq	.+18     	; 0xc90 <__mulsf3+0x12a>
     c7e:	66 0c       	add	r6, r6
     c80:	77 1c       	adc	r7, r7
     c82:	88 1c       	adc	r8, r8
     c84:	99 1c       	adc	r9, r9
     c86:	56 94       	lsr	r5
     c88:	47 94       	ror	r4
     c8a:	37 94       	ror	r3
     c8c:	27 94       	ror	r2
     c8e:	c3 cf       	rjmp	.-122    	; 0xc16 <__mulsf3+0xb0>
     c90:	fa 85       	ldd	r31, Y+10	; 0x0a
     c92:	ea 89       	ldd	r30, Y+18	; 0x12
     c94:	2b 89       	ldd	r18, Y+19	; 0x13
     c96:	3c 89       	ldd	r19, Y+20	; 0x14
     c98:	8b 85       	ldd	r24, Y+11	; 0x0b
     c9a:	9c 85       	ldd	r25, Y+12	; 0x0c
     c9c:	28 0f       	add	r18, r24
     c9e:	39 1f       	adc	r19, r25
     ca0:	2e 5f       	subi	r18, 0xFE	; 254
     ca2:	3f 4f       	sbci	r19, 0xFF	; 255
     ca4:	17 c0       	rjmp	.+46     	; 0xcd4 <__mulsf3+0x16e>
     ca6:	ca 01       	movw	r24, r20
     ca8:	81 70       	andi	r24, 0x01	; 1
     caa:	90 70       	andi	r25, 0x00	; 0
     cac:	89 2b       	or	r24, r25
     cae:	61 f0       	breq	.+24     	; 0xcc8 <__mulsf3+0x162>
     cb0:	16 95       	lsr	r17
     cb2:	07 95       	ror	r16
     cb4:	f7 94       	ror	r15
     cb6:	e7 94       	ror	r14
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 e0       	ldi	r26, 0x00	; 0
     cbe:	b0 e8       	ldi	r27, 0x80	; 128
     cc0:	e8 2a       	or	r14, r24
     cc2:	f9 2a       	or	r15, r25
     cc4:	0a 2b       	or	r16, r26
     cc6:	1b 2b       	or	r17, r27
     cc8:	76 95       	lsr	r23
     cca:	67 95       	ror	r22
     ccc:	57 95       	ror	r21
     cce:	47 95       	ror	r20
     cd0:	2f 5f       	subi	r18, 0xFF	; 255
     cd2:	3f 4f       	sbci	r19, 0xFF	; 255
     cd4:	77 fd       	sbrc	r23, 7
     cd6:	e7 cf       	rjmp	.-50     	; 0xca6 <__mulsf3+0x140>
     cd8:	0c c0       	rjmp	.+24     	; 0xcf2 <__mulsf3+0x18c>
     cda:	44 0f       	add	r20, r20
     cdc:	55 1f       	adc	r21, r21
     cde:	66 1f       	adc	r22, r22
     ce0:	77 1f       	adc	r23, r23
     ce2:	17 fd       	sbrc	r17, 7
     ce4:	41 60       	ori	r20, 0x01	; 1
     ce6:	ee 0c       	add	r14, r14
     ce8:	ff 1c       	adc	r15, r15
     cea:	00 1f       	adc	r16, r16
     cec:	11 1f       	adc	r17, r17
     cee:	21 50       	subi	r18, 0x01	; 1
     cf0:	30 40       	sbci	r19, 0x00	; 0
     cf2:	40 30       	cpi	r20, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	59 07       	cpc	r21, r25
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	69 07       	cpc	r22, r25
     cfc:	90 e4       	ldi	r25, 0x40	; 64
     cfe:	79 07       	cpc	r23, r25
     d00:	60 f3       	brcs	.-40     	; 0xcda <__mulsf3+0x174>
     d02:	2b 8f       	std	Y+27, r18	; 0x1b
     d04:	3c 8f       	std	Y+28, r19	; 0x1c
     d06:	db 01       	movw	r26, r22
     d08:	ca 01       	movw	r24, r20
     d0a:	8f 77       	andi	r24, 0x7F	; 127
     d0c:	90 70       	andi	r25, 0x00	; 0
     d0e:	a0 70       	andi	r26, 0x00	; 0
     d10:	b0 70       	andi	r27, 0x00	; 0
     d12:	80 34       	cpi	r24, 0x40	; 64
     d14:	91 05       	cpc	r25, r1
     d16:	a1 05       	cpc	r26, r1
     d18:	b1 05       	cpc	r27, r1
     d1a:	61 f4       	brne	.+24     	; 0xd34 <__mulsf3+0x1ce>
     d1c:	47 fd       	sbrc	r20, 7
     d1e:	0a c0       	rjmp	.+20     	; 0xd34 <__mulsf3+0x1ce>
     d20:	e1 14       	cp	r14, r1
     d22:	f1 04       	cpc	r15, r1
     d24:	01 05       	cpc	r16, r1
     d26:	11 05       	cpc	r17, r1
     d28:	29 f0       	breq	.+10     	; 0xd34 <__mulsf3+0x1ce>
     d2a:	40 5c       	subi	r20, 0xC0	; 192
     d2c:	5f 4f       	sbci	r21, 0xFF	; 255
     d2e:	6f 4f       	sbci	r22, 0xFF	; 255
     d30:	7f 4f       	sbci	r23, 0xFF	; 255
     d32:	40 78       	andi	r20, 0x80	; 128
     d34:	1a 8e       	std	Y+26, r1	; 0x1a
     d36:	fe 17       	cp	r31, r30
     d38:	11 f0       	breq	.+4      	; 0xd3e <__mulsf3+0x1d8>
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	8a 8f       	std	Y+26, r24	; 0x1a
     d3e:	4d 8f       	std	Y+29, r20	; 0x1d
     d40:	5e 8f       	std	Y+30, r21	; 0x1e
     d42:	6f 8f       	std	Y+31, r22	; 0x1f
     d44:	78 a3       	std	Y+32, r23	; 0x20
     d46:	83 e0       	ldi	r24, 0x03	; 3
     d48:	89 8f       	std	Y+25, r24	; 0x19
     d4a:	ce 01       	movw	r24, r28
     d4c:	49 96       	adiw	r24, 0x19	; 25
     d4e:	0e 94 0e 08 	call	0x101c	; 0x101c <__pack_f>
     d52:	a0 96       	adiw	r28, 0x20	; 32
     d54:	e2 e1       	ldi	r30, 0x12	; 18
     d56:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__epilogue_restores__>

00000d5a <__gtsf2>:
     d5a:	a8 e1       	ldi	r26, 0x18	; 24
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e3 eb       	ldi	r30, 0xB3	; 179
     d60:	f6 e0       	ldi	r31, 0x06	; 6
     d62:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__prologue_saves__+0x18>
     d66:	69 83       	std	Y+1, r22	; 0x01
     d68:	7a 83       	std	Y+2, r23	; 0x02
     d6a:	8b 83       	std	Y+3, r24	; 0x03
     d6c:	9c 83       	std	Y+4, r25	; 0x04
     d6e:	2d 83       	std	Y+5, r18	; 0x05
     d70:	3e 83       	std	Y+6, r19	; 0x06
     d72:	4f 83       	std	Y+7, r20	; 0x07
     d74:	58 87       	std	Y+8, r21	; 0x08
     d76:	89 e0       	ldi	r24, 0x09	; 9
     d78:	e8 2e       	mov	r14, r24
     d7a:	f1 2c       	mov	r15, r1
     d7c:	ec 0e       	add	r14, r28
     d7e:	fd 1e       	adc	r15, r29
     d80:	ce 01       	movw	r24, r28
     d82:	01 96       	adiw	r24, 0x01	; 1
     d84:	b7 01       	movw	r22, r14
     d86:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__unpack_f>
     d8a:	8e 01       	movw	r16, r28
     d8c:	0f 5e       	subi	r16, 0xEF	; 239
     d8e:	1f 4f       	sbci	r17, 0xFF	; 255
     d90:	ce 01       	movw	r24, r28
     d92:	05 96       	adiw	r24, 0x05	; 5
     d94:	b8 01       	movw	r22, r16
     d96:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__unpack_f>
     d9a:	89 85       	ldd	r24, Y+9	; 0x09
     d9c:	82 30       	cpi	r24, 0x02	; 2
     d9e:	40 f0       	brcs	.+16     	; 0xdb0 <__gtsf2+0x56>
     da0:	89 89       	ldd	r24, Y+17	; 0x11
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	28 f0       	brcs	.+10     	; 0xdb0 <__gtsf2+0x56>
     da6:	c7 01       	movw	r24, r14
     da8:	b8 01       	movw	r22, r16
     daa:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__fpcmp_parts_f>
     dae:	01 c0       	rjmp	.+2      	; 0xdb2 <__gtsf2+0x58>
     db0:	8f ef       	ldi	r24, 0xFF	; 255
     db2:	68 96       	adiw	r28, 0x18	; 24
     db4:	e6 e0       	ldi	r30, 0x06	; 6
     db6:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__epilogue_restores__+0x18>

00000dba <__ltsf2>:
     dba:	a8 e1       	ldi	r26, 0x18	; 24
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e3 ee       	ldi	r30, 0xE3	; 227
     dc0:	f6 e0       	ldi	r31, 0x06	; 6
     dc2:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__prologue_saves__+0x18>
     dc6:	69 83       	std	Y+1, r22	; 0x01
     dc8:	7a 83       	std	Y+2, r23	; 0x02
     dca:	8b 83       	std	Y+3, r24	; 0x03
     dcc:	9c 83       	std	Y+4, r25	; 0x04
     dce:	2d 83       	std	Y+5, r18	; 0x05
     dd0:	3e 83       	std	Y+6, r19	; 0x06
     dd2:	4f 83       	std	Y+7, r20	; 0x07
     dd4:	58 87       	std	Y+8, r21	; 0x08
     dd6:	89 e0       	ldi	r24, 0x09	; 9
     dd8:	e8 2e       	mov	r14, r24
     dda:	f1 2c       	mov	r15, r1
     ddc:	ec 0e       	add	r14, r28
     dde:	fd 1e       	adc	r15, r29
     de0:	ce 01       	movw	r24, r28
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	b7 01       	movw	r22, r14
     de6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__unpack_f>
     dea:	8e 01       	movw	r16, r28
     dec:	0f 5e       	subi	r16, 0xEF	; 239
     dee:	1f 4f       	sbci	r17, 0xFF	; 255
     df0:	ce 01       	movw	r24, r28
     df2:	05 96       	adiw	r24, 0x05	; 5
     df4:	b8 01       	movw	r22, r16
     df6:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__unpack_f>
     dfa:	89 85       	ldd	r24, Y+9	; 0x09
     dfc:	82 30       	cpi	r24, 0x02	; 2
     dfe:	40 f0       	brcs	.+16     	; 0xe10 <__ltsf2+0x56>
     e00:	89 89       	ldd	r24, Y+17	; 0x11
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	28 f0       	brcs	.+10     	; 0xe10 <__ltsf2+0x56>
     e06:	c7 01       	movw	r24, r14
     e08:	b8 01       	movw	r22, r16
     e0a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__fpcmp_parts_f>
     e0e:	01 c0       	rjmp	.+2      	; 0xe12 <__ltsf2+0x58>
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	68 96       	adiw	r28, 0x18	; 24
     e14:	e6 e0       	ldi	r30, 0x06	; 6
     e16:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__epilogue_restores__+0x18>

00000e1a <__floatsisf>:
     e1a:	a8 e0       	ldi	r26, 0x08	; 8
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e3 e1       	ldi	r30, 0x13	; 19
     e20:	f7 e0       	ldi	r31, 0x07	; 7
     e22:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <__prologue_saves__+0x12>
     e26:	9b 01       	movw	r18, r22
     e28:	ac 01       	movw	r20, r24
     e2a:	83 e0       	ldi	r24, 0x03	; 3
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	da 01       	movw	r26, r20
     e30:	c9 01       	movw	r24, r18
     e32:	88 27       	eor	r24, r24
     e34:	b7 fd       	sbrc	r27, 7
     e36:	83 95       	inc	r24
     e38:	99 27       	eor	r25, r25
     e3a:	aa 27       	eor	r26, r26
     e3c:	bb 27       	eor	r27, r27
     e3e:	b8 2e       	mov	r11, r24
     e40:	21 15       	cp	r18, r1
     e42:	31 05       	cpc	r19, r1
     e44:	41 05       	cpc	r20, r1
     e46:	51 05       	cpc	r21, r1
     e48:	19 f4       	brne	.+6      	; 0xe50 <__floatsisf+0x36>
     e4a:	82 e0       	ldi	r24, 0x02	; 2
     e4c:	89 83       	std	Y+1, r24	; 0x01
     e4e:	3a c0       	rjmp	.+116    	; 0xec4 <__floatsisf+0xaa>
     e50:	88 23       	and	r24, r24
     e52:	a9 f0       	breq	.+42     	; 0xe7e <__floatsisf+0x64>
     e54:	20 30       	cpi	r18, 0x00	; 0
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	38 07       	cpc	r19, r24
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	48 07       	cpc	r20, r24
     e5e:	80 e8       	ldi	r24, 0x80	; 128
     e60:	58 07       	cpc	r21, r24
     e62:	29 f4       	brne	.+10     	; 0xe6e <__floatsisf+0x54>
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	9f ec       	ldi	r25, 0xCF	; 207
     e6c:	30 c0       	rjmp	.+96     	; 0xece <__floatsisf+0xb4>
     e6e:	ee 24       	eor	r14, r14
     e70:	ff 24       	eor	r15, r15
     e72:	87 01       	movw	r16, r14
     e74:	e2 1a       	sub	r14, r18
     e76:	f3 0a       	sbc	r15, r19
     e78:	04 0b       	sbc	r16, r20
     e7a:	15 0b       	sbc	r17, r21
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <__floatsisf+0x68>
     e7e:	79 01       	movw	r14, r18
     e80:	8a 01       	movw	r16, r20
     e82:	8e e1       	ldi	r24, 0x1E	; 30
     e84:	c8 2e       	mov	r12, r24
     e86:	d1 2c       	mov	r13, r1
     e88:	dc 82       	std	Y+4, r13	; 0x04
     e8a:	cb 82       	std	Y+3, r12	; 0x03
     e8c:	ed 82       	std	Y+5, r14	; 0x05
     e8e:	fe 82       	std	Y+6, r15	; 0x06
     e90:	0f 83       	std	Y+7, r16	; 0x07
     e92:	18 87       	std	Y+8, r17	; 0x08
     e94:	c8 01       	movw	r24, r16
     e96:	b7 01       	movw	r22, r14
     e98:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__clzsi2>
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	18 16       	cp	r1, r24
     ea0:	19 06       	cpc	r1, r25
     ea2:	84 f4       	brge	.+32     	; 0xec4 <__floatsisf+0xaa>
     ea4:	08 2e       	mov	r0, r24
     ea6:	04 c0       	rjmp	.+8      	; 0xeb0 <__floatsisf+0x96>
     ea8:	ee 0c       	add	r14, r14
     eaa:	ff 1c       	adc	r15, r15
     eac:	00 1f       	adc	r16, r16
     eae:	11 1f       	adc	r17, r17
     eb0:	0a 94       	dec	r0
     eb2:	d2 f7       	brpl	.-12     	; 0xea8 <__floatsisf+0x8e>
     eb4:	ed 82       	std	Y+5, r14	; 0x05
     eb6:	fe 82       	std	Y+6, r15	; 0x06
     eb8:	0f 83       	std	Y+7, r16	; 0x07
     eba:	18 87       	std	Y+8, r17	; 0x08
     ebc:	c8 1a       	sub	r12, r24
     ebe:	d9 0a       	sbc	r13, r25
     ec0:	dc 82       	std	Y+4, r13	; 0x04
     ec2:	cb 82       	std	Y+3, r12	; 0x03
     ec4:	ba 82       	std	Y+2, r11	; 0x02
     ec6:	ce 01       	movw	r24, r28
     ec8:	01 96       	adiw	r24, 0x01	; 1
     eca:	0e 94 0e 08 	call	0x101c	; 0x101c <__pack_f>
     ece:	28 96       	adiw	r28, 0x08	; 8
     ed0:	e9 e0       	ldi	r30, 0x09	; 9
     ed2:	0c 94 ed 09 	jmp	0x13da	; 0x13da <__epilogue_restores__+0x12>

00000ed6 <__fixsfsi>:
     ed6:	ac e0       	ldi	r26, 0x0C	; 12
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e1 e7       	ldi	r30, 0x71	; 113
     edc:	f7 e0       	ldi	r31, 0x07	; 7
     ede:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <__prologue_saves__+0x20>
     ee2:	69 83       	std	Y+1, r22	; 0x01
     ee4:	7a 83       	std	Y+2, r23	; 0x02
     ee6:	8b 83       	std	Y+3, r24	; 0x03
     ee8:	9c 83       	std	Y+4, r25	; 0x04
     eea:	ce 01       	movw	r24, r28
     eec:	01 96       	adiw	r24, 0x01	; 1
     eee:	be 01       	movw	r22, r28
     ef0:	6b 5f       	subi	r22, 0xFB	; 251
     ef2:	7f 4f       	sbci	r23, 0xFF	; 255
     ef4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__unpack_f>
     ef8:	8d 81       	ldd	r24, Y+5	; 0x05
     efa:	82 30       	cpi	r24, 0x02	; 2
     efc:	61 f1       	breq	.+88     	; 0xf56 <__fixsfsi+0x80>
     efe:	82 30       	cpi	r24, 0x02	; 2
     f00:	50 f1       	brcs	.+84     	; 0xf56 <__fixsfsi+0x80>
     f02:	84 30       	cpi	r24, 0x04	; 4
     f04:	21 f4       	brne	.+8      	; 0xf0e <__fixsfsi+0x38>
     f06:	8e 81       	ldd	r24, Y+6	; 0x06
     f08:	88 23       	and	r24, r24
     f0a:	51 f1       	breq	.+84     	; 0xf60 <__fixsfsi+0x8a>
     f0c:	2e c0       	rjmp	.+92     	; 0xf6a <__fixsfsi+0x94>
     f0e:	2f 81       	ldd	r18, Y+7	; 0x07
     f10:	38 85       	ldd	r19, Y+8	; 0x08
     f12:	37 fd       	sbrc	r19, 7
     f14:	20 c0       	rjmp	.+64     	; 0xf56 <__fixsfsi+0x80>
     f16:	6e 81       	ldd	r22, Y+6	; 0x06
     f18:	2f 31       	cpi	r18, 0x1F	; 31
     f1a:	31 05       	cpc	r19, r1
     f1c:	1c f0       	brlt	.+6      	; 0xf24 <__fixsfsi+0x4e>
     f1e:	66 23       	and	r22, r22
     f20:	f9 f0       	breq	.+62     	; 0xf60 <__fixsfsi+0x8a>
     f22:	23 c0       	rjmp	.+70     	; 0xf6a <__fixsfsi+0x94>
     f24:	8e e1       	ldi	r24, 0x1E	; 30
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	82 1b       	sub	r24, r18
     f2a:	93 0b       	sbc	r25, r19
     f2c:	29 85       	ldd	r18, Y+9	; 0x09
     f2e:	3a 85       	ldd	r19, Y+10	; 0x0a
     f30:	4b 85       	ldd	r20, Y+11	; 0x0b
     f32:	5c 85       	ldd	r21, Y+12	; 0x0c
     f34:	04 c0       	rjmp	.+8      	; 0xf3e <__fixsfsi+0x68>
     f36:	56 95       	lsr	r21
     f38:	47 95       	ror	r20
     f3a:	37 95       	ror	r19
     f3c:	27 95       	ror	r18
     f3e:	8a 95       	dec	r24
     f40:	d2 f7       	brpl	.-12     	; 0xf36 <__fixsfsi+0x60>
     f42:	66 23       	and	r22, r22
     f44:	b1 f0       	breq	.+44     	; 0xf72 <__fixsfsi+0x9c>
     f46:	50 95       	com	r21
     f48:	40 95       	com	r20
     f4a:	30 95       	com	r19
     f4c:	21 95       	neg	r18
     f4e:	3f 4f       	sbci	r19, 0xFF	; 255
     f50:	4f 4f       	sbci	r20, 0xFF	; 255
     f52:	5f 4f       	sbci	r21, 0xFF	; 255
     f54:	0e c0       	rjmp	.+28     	; 0xf72 <__fixsfsi+0x9c>
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e0       	ldi	r20, 0x00	; 0
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	09 c0       	rjmp	.+18     	; 0xf72 <__fixsfsi+0x9c>
     f60:	2f ef       	ldi	r18, 0xFF	; 255
     f62:	3f ef       	ldi	r19, 0xFF	; 255
     f64:	4f ef       	ldi	r20, 0xFF	; 255
     f66:	5f e7       	ldi	r21, 0x7F	; 127
     f68:	04 c0       	rjmp	.+8      	; 0xf72 <__fixsfsi+0x9c>
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	50 e8       	ldi	r21, 0x80	; 128
     f72:	b9 01       	movw	r22, r18
     f74:	ca 01       	movw	r24, r20
     f76:	2c 96       	adiw	r28, 0x0c	; 12
     f78:	e2 e0       	ldi	r30, 0x02	; 2
     f7a:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <__epilogue_restores__+0x20>

00000f7e <__clzsi2>:
     f7e:	ef 92       	push	r14
     f80:	ff 92       	push	r15
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	7b 01       	movw	r14, r22
     f88:	8c 01       	movw	r16, r24
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	e8 16       	cp	r14, r24
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	f8 06       	cpc	r15, r24
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	08 07       	cpc	r16, r24
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	18 07       	cpc	r17, r24
     f9a:	88 f4       	brcc	.+34     	; 0xfbe <__clzsi2+0x40>
     f9c:	8f ef       	ldi	r24, 0xFF	; 255
     f9e:	e8 16       	cp	r14, r24
     fa0:	f1 04       	cpc	r15, r1
     fa2:	01 05       	cpc	r16, r1
     fa4:	11 05       	cpc	r17, r1
     fa6:	31 f0       	breq	.+12     	; 0xfb4 <__clzsi2+0x36>
     fa8:	28 f0       	brcs	.+10     	; 0xfb4 <__clzsi2+0x36>
     faa:	88 e0       	ldi	r24, 0x08	; 8
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	a0 e0       	ldi	r26, 0x00	; 0
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	17 c0       	rjmp	.+46     	; 0xfe2 <__clzsi2+0x64>
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a0 e0       	ldi	r26, 0x00	; 0
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	12 c0       	rjmp	.+36     	; 0xfe2 <__clzsi2+0x64>
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	e8 16       	cp	r14, r24
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	f8 06       	cpc	r15, r24
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	08 07       	cpc	r16, r24
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	18 07       	cpc	r17, r24
     fce:	28 f0       	brcs	.+10     	; 0xfda <__clzsi2+0x5c>
     fd0:	88 e1       	ldi	r24, 0x18	; 24
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <__clzsi2+0x64>
     fda:	80 e1       	ldi	r24, 0x10	; 16
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	a0 e0       	ldi	r26, 0x00	; 0
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	20 e2       	ldi	r18, 0x20	; 32
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	28 1b       	sub	r18, r24
     fec:	39 0b       	sbc	r19, r25
     fee:	4a 0b       	sbc	r20, r26
     ff0:	5b 0b       	sbc	r21, r27
     ff2:	04 c0       	rjmp	.+8      	; 0xffc <__clzsi2+0x7e>
     ff4:	16 95       	lsr	r17
     ff6:	07 95       	ror	r16
     ff8:	f7 94       	ror	r15
     ffa:	e7 94       	ror	r14
     ffc:	8a 95       	dec	r24
     ffe:	d2 f7       	brpl	.-12     	; 0xff4 <__clzsi2+0x76>
    1000:	f7 01       	movw	r30, r14
    1002:	e4 59       	subi	r30, 0x94	; 148
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	80 81       	ld	r24, Z
    1008:	28 1b       	sub	r18, r24
    100a:	31 09       	sbc	r19, r1
    100c:	41 09       	sbc	r20, r1
    100e:	51 09       	sbc	r21, r1
    1010:	c9 01       	movw	r24, r18
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	ef 90       	pop	r14
    101a:	08 95       	ret

0000101c <__pack_f>:
    101c:	df 92       	push	r13
    101e:	ef 92       	push	r14
    1020:	ff 92       	push	r15
    1022:	0f 93       	push	r16
    1024:	1f 93       	push	r17
    1026:	fc 01       	movw	r30, r24
    1028:	e4 80       	ldd	r14, Z+4	; 0x04
    102a:	f5 80       	ldd	r15, Z+5	; 0x05
    102c:	06 81       	ldd	r16, Z+6	; 0x06
    102e:	17 81       	ldd	r17, Z+7	; 0x07
    1030:	d1 80       	ldd	r13, Z+1	; 0x01
    1032:	80 81       	ld	r24, Z
    1034:	82 30       	cpi	r24, 0x02	; 2
    1036:	48 f4       	brcc	.+18     	; 0x104a <__pack_f+0x2e>
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	a0 e1       	ldi	r26, 0x10	; 16
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e8 2a       	or	r14, r24
    1042:	f9 2a       	or	r15, r25
    1044:	0a 2b       	or	r16, r26
    1046:	1b 2b       	or	r17, r27
    1048:	a5 c0       	rjmp	.+330    	; 0x1194 <__pack_f+0x178>
    104a:	84 30       	cpi	r24, 0x04	; 4
    104c:	09 f4       	brne	.+2      	; 0x1050 <__pack_f+0x34>
    104e:	9f c0       	rjmp	.+318    	; 0x118e <__pack_f+0x172>
    1050:	82 30       	cpi	r24, 0x02	; 2
    1052:	21 f4       	brne	.+8      	; 0x105c <__pack_f+0x40>
    1054:	ee 24       	eor	r14, r14
    1056:	ff 24       	eor	r15, r15
    1058:	87 01       	movw	r16, r14
    105a:	05 c0       	rjmp	.+10     	; 0x1066 <__pack_f+0x4a>
    105c:	e1 14       	cp	r14, r1
    105e:	f1 04       	cpc	r15, r1
    1060:	01 05       	cpc	r16, r1
    1062:	11 05       	cpc	r17, r1
    1064:	19 f4       	brne	.+6      	; 0x106c <__pack_f+0x50>
    1066:	e0 e0       	ldi	r30, 0x00	; 0
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	96 c0       	rjmp	.+300    	; 0x1198 <__pack_f+0x17c>
    106c:	62 81       	ldd	r22, Z+2	; 0x02
    106e:	73 81       	ldd	r23, Z+3	; 0x03
    1070:	9f ef       	ldi	r25, 0xFF	; 255
    1072:	62 38       	cpi	r22, 0x82	; 130
    1074:	79 07       	cpc	r23, r25
    1076:	0c f0       	brlt	.+2      	; 0x107a <__pack_f+0x5e>
    1078:	5b c0       	rjmp	.+182    	; 0x1130 <__pack_f+0x114>
    107a:	22 e8       	ldi	r18, 0x82	; 130
    107c:	3f ef       	ldi	r19, 0xFF	; 255
    107e:	26 1b       	sub	r18, r22
    1080:	37 0b       	sbc	r19, r23
    1082:	2a 31       	cpi	r18, 0x1A	; 26
    1084:	31 05       	cpc	r19, r1
    1086:	2c f0       	brlt	.+10     	; 0x1092 <__pack_f+0x76>
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	40 e0       	ldi	r20, 0x00	; 0
    108e:	50 e0       	ldi	r21, 0x00	; 0
    1090:	2a c0       	rjmp	.+84     	; 0x10e6 <__pack_f+0xca>
    1092:	b8 01       	movw	r22, r16
    1094:	a7 01       	movw	r20, r14
    1096:	02 2e       	mov	r0, r18
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <__pack_f+0x86>
    109a:	76 95       	lsr	r23
    109c:	67 95       	ror	r22
    109e:	57 95       	ror	r21
    10a0:	47 95       	ror	r20
    10a2:	0a 94       	dec	r0
    10a4:	d2 f7       	brpl	.-12     	; 0x109a <__pack_f+0x7e>
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	a0 e0       	ldi	r26, 0x00	; 0
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	04 c0       	rjmp	.+8      	; 0x10b8 <__pack_f+0x9c>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	aa 1f       	adc	r26, r26
    10b6:	bb 1f       	adc	r27, r27
    10b8:	2a 95       	dec	r18
    10ba:	d2 f7       	brpl	.-12     	; 0x10b0 <__pack_f+0x94>
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	a1 09       	sbc	r26, r1
    10c0:	b1 09       	sbc	r27, r1
    10c2:	8e 21       	and	r24, r14
    10c4:	9f 21       	and	r25, r15
    10c6:	a0 23       	and	r26, r16
    10c8:	b1 23       	and	r27, r17
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	a1 05       	cpc	r26, r1
    10ce:	b1 05       	cpc	r27, r1
    10d0:	21 f0       	breq	.+8      	; 0x10da <__pack_f+0xbe>
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	a0 e0       	ldi	r26, 0x00	; 0
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	9a 01       	movw	r18, r20
    10dc:	ab 01       	movw	r20, r22
    10de:	28 2b       	or	r18, r24
    10e0:	39 2b       	or	r19, r25
    10e2:	4a 2b       	or	r20, r26
    10e4:	5b 2b       	or	r21, r27
    10e6:	da 01       	movw	r26, r20
    10e8:	c9 01       	movw	r24, r18
    10ea:	8f 77       	andi	r24, 0x7F	; 127
    10ec:	90 70       	andi	r25, 0x00	; 0
    10ee:	a0 70       	andi	r26, 0x00	; 0
    10f0:	b0 70       	andi	r27, 0x00	; 0
    10f2:	80 34       	cpi	r24, 0x40	; 64
    10f4:	91 05       	cpc	r25, r1
    10f6:	a1 05       	cpc	r26, r1
    10f8:	b1 05       	cpc	r27, r1
    10fa:	39 f4       	brne	.+14     	; 0x110a <__pack_f+0xee>
    10fc:	27 ff       	sbrs	r18, 7
    10fe:	09 c0       	rjmp	.+18     	; 0x1112 <__pack_f+0xf6>
    1100:	20 5c       	subi	r18, 0xC0	; 192
    1102:	3f 4f       	sbci	r19, 0xFF	; 255
    1104:	4f 4f       	sbci	r20, 0xFF	; 255
    1106:	5f 4f       	sbci	r21, 0xFF	; 255
    1108:	04 c0       	rjmp	.+8      	; 0x1112 <__pack_f+0xf6>
    110a:	21 5c       	subi	r18, 0xC1	; 193
    110c:	3f 4f       	sbci	r19, 0xFF	; 255
    110e:	4f 4f       	sbci	r20, 0xFF	; 255
    1110:	5f 4f       	sbci	r21, 0xFF	; 255
    1112:	e0 e0       	ldi	r30, 0x00	; 0
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	20 30       	cpi	r18, 0x00	; 0
    1118:	a0 e0       	ldi	r26, 0x00	; 0
    111a:	3a 07       	cpc	r19, r26
    111c:	a0 e0       	ldi	r26, 0x00	; 0
    111e:	4a 07       	cpc	r20, r26
    1120:	a0 e4       	ldi	r26, 0x40	; 64
    1122:	5a 07       	cpc	r21, r26
    1124:	10 f0       	brcs	.+4      	; 0x112a <__pack_f+0x10e>
    1126:	e1 e0       	ldi	r30, 0x01	; 1
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	79 01       	movw	r14, r18
    112c:	8a 01       	movw	r16, r20
    112e:	27 c0       	rjmp	.+78     	; 0x117e <__pack_f+0x162>
    1130:	60 38       	cpi	r22, 0x80	; 128
    1132:	71 05       	cpc	r23, r1
    1134:	64 f5       	brge	.+88     	; 0x118e <__pack_f+0x172>
    1136:	fb 01       	movw	r30, r22
    1138:	e1 58       	subi	r30, 0x81	; 129
    113a:	ff 4f       	sbci	r31, 0xFF	; 255
    113c:	d8 01       	movw	r26, r16
    113e:	c7 01       	movw	r24, r14
    1140:	8f 77       	andi	r24, 0x7F	; 127
    1142:	90 70       	andi	r25, 0x00	; 0
    1144:	a0 70       	andi	r26, 0x00	; 0
    1146:	b0 70       	andi	r27, 0x00	; 0
    1148:	80 34       	cpi	r24, 0x40	; 64
    114a:	91 05       	cpc	r25, r1
    114c:	a1 05       	cpc	r26, r1
    114e:	b1 05       	cpc	r27, r1
    1150:	39 f4       	brne	.+14     	; 0x1160 <__pack_f+0x144>
    1152:	e7 fe       	sbrs	r14, 7
    1154:	0d c0       	rjmp	.+26     	; 0x1170 <__pack_f+0x154>
    1156:	80 e4       	ldi	r24, 0x40	; 64
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	a0 e0       	ldi	r26, 0x00	; 0
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <__pack_f+0x14c>
    1160:	8f e3       	ldi	r24, 0x3F	; 63
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	a0 e0       	ldi	r26, 0x00	; 0
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e8 0e       	add	r14, r24
    116a:	f9 1e       	adc	r15, r25
    116c:	0a 1f       	adc	r16, r26
    116e:	1b 1f       	adc	r17, r27
    1170:	17 ff       	sbrs	r17, 7
    1172:	05 c0       	rjmp	.+10     	; 0x117e <__pack_f+0x162>
    1174:	16 95       	lsr	r17
    1176:	07 95       	ror	r16
    1178:	f7 94       	ror	r15
    117a:	e7 94       	ror	r14
    117c:	31 96       	adiw	r30, 0x01	; 1
    117e:	87 e0       	ldi	r24, 0x07	; 7
    1180:	16 95       	lsr	r17
    1182:	07 95       	ror	r16
    1184:	f7 94       	ror	r15
    1186:	e7 94       	ror	r14
    1188:	8a 95       	dec	r24
    118a:	d1 f7       	brne	.-12     	; 0x1180 <__pack_f+0x164>
    118c:	05 c0       	rjmp	.+10     	; 0x1198 <__pack_f+0x17c>
    118e:	ee 24       	eor	r14, r14
    1190:	ff 24       	eor	r15, r15
    1192:	87 01       	movw	r16, r14
    1194:	ef ef       	ldi	r30, 0xFF	; 255
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	6e 2f       	mov	r22, r30
    119a:	67 95       	ror	r22
    119c:	66 27       	eor	r22, r22
    119e:	67 95       	ror	r22
    11a0:	90 2f       	mov	r25, r16
    11a2:	9f 77       	andi	r25, 0x7F	; 127
    11a4:	d7 94       	ror	r13
    11a6:	dd 24       	eor	r13, r13
    11a8:	d7 94       	ror	r13
    11aa:	8e 2f       	mov	r24, r30
    11ac:	86 95       	lsr	r24
    11ae:	49 2f       	mov	r20, r25
    11b0:	46 2b       	or	r20, r22
    11b2:	58 2f       	mov	r21, r24
    11b4:	5d 29       	or	r21, r13
    11b6:	b7 01       	movw	r22, r14
    11b8:	ca 01       	movw	r24, r20
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	ff 90       	pop	r15
    11c0:	ef 90       	pop	r14
    11c2:	df 90       	pop	r13
    11c4:	08 95       	ret

000011c6 <__unpack_f>:
    11c6:	fc 01       	movw	r30, r24
    11c8:	db 01       	movw	r26, r22
    11ca:	40 81       	ld	r20, Z
    11cc:	51 81       	ldd	r21, Z+1	; 0x01
    11ce:	22 81       	ldd	r18, Z+2	; 0x02
    11d0:	62 2f       	mov	r22, r18
    11d2:	6f 77       	andi	r22, 0x7F	; 127
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	22 1f       	adc	r18, r18
    11d8:	22 27       	eor	r18, r18
    11da:	22 1f       	adc	r18, r18
    11dc:	93 81       	ldd	r25, Z+3	; 0x03
    11de:	89 2f       	mov	r24, r25
    11e0:	88 0f       	add	r24, r24
    11e2:	82 2b       	or	r24, r18
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	99 1f       	adc	r25, r25
    11ea:	99 27       	eor	r25, r25
    11ec:	99 1f       	adc	r25, r25
    11ee:	11 96       	adiw	r26, 0x01	; 1
    11f0:	9c 93       	st	X, r25
    11f2:	11 97       	sbiw	r26, 0x01	; 1
    11f4:	21 15       	cp	r18, r1
    11f6:	31 05       	cpc	r19, r1
    11f8:	a9 f5       	brne	.+106    	; 0x1264 <__unpack_f+0x9e>
    11fa:	41 15       	cp	r20, r1
    11fc:	51 05       	cpc	r21, r1
    11fe:	61 05       	cpc	r22, r1
    1200:	71 05       	cpc	r23, r1
    1202:	11 f4       	brne	.+4      	; 0x1208 <__unpack_f+0x42>
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	37 c0       	rjmp	.+110    	; 0x1276 <__unpack_f+0xb0>
    1208:	82 e8       	ldi	r24, 0x82	; 130
    120a:	9f ef       	ldi	r25, 0xFF	; 255
    120c:	13 96       	adiw	r26, 0x03	; 3
    120e:	9c 93       	st	X, r25
    1210:	8e 93       	st	-X, r24
    1212:	12 97       	sbiw	r26, 0x02	; 2
    1214:	9a 01       	movw	r18, r20
    1216:	ab 01       	movw	r20, r22
    1218:	67 e0       	ldi	r22, 0x07	; 7
    121a:	22 0f       	add	r18, r18
    121c:	33 1f       	adc	r19, r19
    121e:	44 1f       	adc	r20, r20
    1220:	55 1f       	adc	r21, r21
    1222:	6a 95       	dec	r22
    1224:	d1 f7       	brne	.-12     	; 0x121a <__unpack_f+0x54>
    1226:	83 e0       	ldi	r24, 0x03	; 3
    1228:	8c 93       	st	X, r24
    122a:	0d c0       	rjmp	.+26     	; 0x1246 <__unpack_f+0x80>
    122c:	22 0f       	add	r18, r18
    122e:	33 1f       	adc	r19, r19
    1230:	44 1f       	adc	r20, r20
    1232:	55 1f       	adc	r21, r21
    1234:	12 96       	adiw	r26, 0x02	; 2
    1236:	8d 91       	ld	r24, X+
    1238:	9c 91       	ld	r25, X
    123a:	13 97       	sbiw	r26, 0x03	; 3
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	13 96       	adiw	r26, 0x03	; 3
    1240:	9c 93       	st	X, r25
    1242:	8e 93       	st	-X, r24
    1244:	12 97       	sbiw	r26, 0x02	; 2
    1246:	20 30       	cpi	r18, 0x00	; 0
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	38 07       	cpc	r19, r24
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	48 07       	cpc	r20, r24
    1250:	80 e4       	ldi	r24, 0x40	; 64
    1252:	58 07       	cpc	r21, r24
    1254:	58 f3       	brcs	.-42     	; 0x122c <__unpack_f+0x66>
    1256:	14 96       	adiw	r26, 0x04	; 4
    1258:	2d 93       	st	X+, r18
    125a:	3d 93       	st	X+, r19
    125c:	4d 93       	st	X+, r20
    125e:	5c 93       	st	X, r21
    1260:	17 97       	sbiw	r26, 0x07	; 7
    1262:	08 95       	ret
    1264:	2f 3f       	cpi	r18, 0xFF	; 255
    1266:	31 05       	cpc	r19, r1
    1268:	79 f4       	brne	.+30     	; 0x1288 <__unpack_f+0xc2>
    126a:	41 15       	cp	r20, r1
    126c:	51 05       	cpc	r21, r1
    126e:	61 05       	cpc	r22, r1
    1270:	71 05       	cpc	r23, r1
    1272:	19 f4       	brne	.+6      	; 0x127a <__unpack_f+0xb4>
    1274:	84 e0       	ldi	r24, 0x04	; 4
    1276:	8c 93       	st	X, r24
    1278:	08 95       	ret
    127a:	64 ff       	sbrs	r22, 4
    127c:	03 c0       	rjmp	.+6      	; 0x1284 <__unpack_f+0xbe>
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	8c 93       	st	X, r24
    1282:	12 c0       	rjmp	.+36     	; 0x12a8 <__unpack_f+0xe2>
    1284:	1c 92       	st	X, r1
    1286:	10 c0       	rjmp	.+32     	; 0x12a8 <__unpack_f+0xe2>
    1288:	2f 57       	subi	r18, 0x7F	; 127
    128a:	30 40       	sbci	r19, 0x00	; 0
    128c:	13 96       	adiw	r26, 0x03	; 3
    128e:	3c 93       	st	X, r19
    1290:	2e 93       	st	-X, r18
    1292:	12 97       	sbiw	r26, 0x02	; 2
    1294:	83 e0       	ldi	r24, 0x03	; 3
    1296:	8c 93       	st	X, r24
    1298:	87 e0       	ldi	r24, 0x07	; 7
    129a:	44 0f       	add	r20, r20
    129c:	55 1f       	adc	r21, r21
    129e:	66 1f       	adc	r22, r22
    12a0:	77 1f       	adc	r23, r23
    12a2:	8a 95       	dec	r24
    12a4:	d1 f7       	brne	.-12     	; 0x129a <__unpack_f+0xd4>
    12a6:	70 64       	ori	r23, 0x40	; 64
    12a8:	14 96       	adiw	r26, 0x04	; 4
    12aa:	4d 93       	st	X+, r20
    12ac:	5d 93       	st	X+, r21
    12ae:	6d 93       	st	X+, r22
    12b0:	7c 93       	st	X, r23
    12b2:	17 97       	sbiw	r26, 0x07	; 7
    12b4:	08 95       	ret

000012b6 <__fpcmp_parts_f>:
    12b6:	1f 93       	push	r17
    12b8:	dc 01       	movw	r26, r24
    12ba:	fb 01       	movw	r30, r22
    12bc:	9c 91       	ld	r25, X
    12be:	92 30       	cpi	r25, 0x02	; 2
    12c0:	08 f4       	brcc	.+2      	; 0x12c4 <__fpcmp_parts_f+0xe>
    12c2:	47 c0       	rjmp	.+142    	; 0x1352 <__fpcmp_parts_f+0x9c>
    12c4:	80 81       	ld	r24, Z
    12c6:	82 30       	cpi	r24, 0x02	; 2
    12c8:	08 f4       	brcc	.+2      	; 0x12cc <__fpcmp_parts_f+0x16>
    12ca:	43 c0       	rjmp	.+134    	; 0x1352 <__fpcmp_parts_f+0x9c>
    12cc:	94 30       	cpi	r25, 0x04	; 4
    12ce:	51 f4       	brne	.+20     	; 0x12e4 <__fpcmp_parts_f+0x2e>
    12d0:	11 96       	adiw	r26, 0x01	; 1
    12d2:	1c 91       	ld	r17, X
    12d4:	84 30       	cpi	r24, 0x04	; 4
    12d6:	99 f5       	brne	.+102    	; 0x133e <__fpcmp_parts_f+0x88>
    12d8:	81 81       	ldd	r24, Z+1	; 0x01
    12da:	68 2f       	mov	r22, r24
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	61 1b       	sub	r22, r17
    12e0:	71 09       	sbc	r23, r1
    12e2:	3f c0       	rjmp	.+126    	; 0x1362 <__fpcmp_parts_f+0xac>
    12e4:	84 30       	cpi	r24, 0x04	; 4
    12e6:	21 f0       	breq	.+8      	; 0x12f0 <__fpcmp_parts_f+0x3a>
    12e8:	92 30       	cpi	r25, 0x02	; 2
    12ea:	31 f4       	brne	.+12     	; 0x12f8 <__fpcmp_parts_f+0x42>
    12ec:	82 30       	cpi	r24, 0x02	; 2
    12ee:	b9 f1       	breq	.+110    	; 0x135e <__fpcmp_parts_f+0xa8>
    12f0:	81 81       	ldd	r24, Z+1	; 0x01
    12f2:	88 23       	and	r24, r24
    12f4:	89 f1       	breq	.+98     	; 0x1358 <__fpcmp_parts_f+0xa2>
    12f6:	2d c0       	rjmp	.+90     	; 0x1352 <__fpcmp_parts_f+0x9c>
    12f8:	11 96       	adiw	r26, 0x01	; 1
    12fa:	1c 91       	ld	r17, X
    12fc:	11 97       	sbiw	r26, 0x01	; 1
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	f1 f0       	breq	.+60     	; 0x133e <__fpcmp_parts_f+0x88>
    1302:	81 81       	ldd	r24, Z+1	; 0x01
    1304:	18 17       	cp	r17, r24
    1306:	d9 f4       	brne	.+54     	; 0x133e <__fpcmp_parts_f+0x88>
    1308:	12 96       	adiw	r26, 0x02	; 2
    130a:	2d 91       	ld	r18, X+
    130c:	3c 91       	ld	r19, X
    130e:	13 97       	sbiw	r26, 0x03	; 3
    1310:	82 81       	ldd	r24, Z+2	; 0x02
    1312:	93 81       	ldd	r25, Z+3	; 0x03
    1314:	82 17       	cp	r24, r18
    1316:	93 07       	cpc	r25, r19
    1318:	94 f0       	brlt	.+36     	; 0x133e <__fpcmp_parts_f+0x88>
    131a:	28 17       	cp	r18, r24
    131c:	39 07       	cpc	r19, r25
    131e:	bc f0       	brlt	.+46     	; 0x134e <__fpcmp_parts_f+0x98>
    1320:	14 96       	adiw	r26, 0x04	; 4
    1322:	8d 91       	ld	r24, X+
    1324:	9d 91       	ld	r25, X+
    1326:	0d 90       	ld	r0, X+
    1328:	bc 91       	ld	r27, X
    132a:	a0 2d       	mov	r26, r0
    132c:	24 81       	ldd	r18, Z+4	; 0x04
    132e:	35 81       	ldd	r19, Z+5	; 0x05
    1330:	46 81       	ldd	r20, Z+6	; 0x06
    1332:	57 81       	ldd	r21, Z+7	; 0x07
    1334:	28 17       	cp	r18, r24
    1336:	39 07       	cpc	r19, r25
    1338:	4a 07       	cpc	r20, r26
    133a:	5b 07       	cpc	r21, r27
    133c:	18 f4       	brcc	.+6      	; 0x1344 <__fpcmp_parts_f+0x8e>
    133e:	11 23       	and	r17, r17
    1340:	41 f0       	breq	.+16     	; 0x1352 <__fpcmp_parts_f+0x9c>
    1342:	0a c0       	rjmp	.+20     	; 0x1358 <__fpcmp_parts_f+0xa2>
    1344:	82 17       	cp	r24, r18
    1346:	93 07       	cpc	r25, r19
    1348:	a4 07       	cpc	r26, r20
    134a:	b5 07       	cpc	r27, r21
    134c:	40 f4       	brcc	.+16     	; 0x135e <__fpcmp_parts_f+0xa8>
    134e:	11 23       	and	r17, r17
    1350:	19 f0       	breq	.+6      	; 0x1358 <__fpcmp_parts_f+0xa2>
    1352:	61 e0       	ldi	r22, 0x01	; 1
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	05 c0       	rjmp	.+10     	; 0x1362 <__fpcmp_parts_f+0xac>
    1358:	6f ef       	ldi	r22, 0xFF	; 255
    135a:	7f ef       	ldi	r23, 0xFF	; 255
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <__fpcmp_parts_f+0xac>
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	70 e0       	ldi	r23, 0x00	; 0
    1362:	cb 01       	movw	r24, r22
    1364:	1f 91       	pop	r17
    1366:	08 95       	ret

00001368 <__udivmodhi4>:
    1368:	aa 1b       	sub	r26, r26
    136a:	bb 1b       	sub	r27, r27
    136c:	51 e1       	ldi	r21, 0x11	; 17
    136e:	07 c0       	rjmp	.+14     	; 0x137e <__udivmodhi4_ep>

00001370 <__udivmodhi4_loop>:
    1370:	aa 1f       	adc	r26, r26
    1372:	bb 1f       	adc	r27, r27
    1374:	a6 17       	cp	r26, r22
    1376:	b7 07       	cpc	r27, r23
    1378:	10 f0       	brcs	.+4      	; 0x137e <__udivmodhi4_ep>
    137a:	a6 1b       	sub	r26, r22
    137c:	b7 0b       	sbc	r27, r23

0000137e <__udivmodhi4_ep>:
    137e:	88 1f       	adc	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	5a 95       	dec	r21
    1384:	a9 f7       	brne	.-22     	; 0x1370 <__udivmodhi4_loop>
    1386:	80 95       	com	r24
    1388:	90 95       	com	r25
    138a:	bc 01       	movw	r22, r24
    138c:	cd 01       	movw	r24, r26
    138e:	08 95       	ret

00001390 <__prologue_saves__>:
    1390:	2f 92       	push	r2
    1392:	3f 92       	push	r3
    1394:	4f 92       	push	r4
    1396:	5f 92       	push	r5
    1398:	6f 92       	push	r6
    139a:	7f 92       	push	r7
    139c:	8f 92       	push	r8
    139e:	9f 92       	push	r9
    13a0:	af 92       	push	r10
    13a2:	bf 92       	push	r11
    13a4:	cf 92       	push	r12
    13a6:	df 92       	push	r13
    13a8:	ef 92       	push	r14
    13aa:	ff 92       	push	r15
    13ac:	0f 93       	push	r16
    13ae:	1f 93       	push	r17
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
    13b8:	ca 1b       	sub	r28, r26
    13ba:	db 0b       	sbc	r29, r27
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	09 94       	ijmp

000013c8 <__epilogue_restores__>:
    13c8:	2a 88       	ldd	r2, Y+18	; 0x12
    13ca:	39 88       	ldd	r3, Y+17	; 0x11
    13cc:	48 88       	ldd	r4, Y+16	; 0x10
    13ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    13d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    13d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    13d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    13d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    13d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    13da:	b9 84       	ldd	r11, Y+9	; 0x09
    13dc:	c8 84       	ldd	r12, Y+8	; 0x08
    13de:	df 80       	ldd	r13, Y+7	; 0x07
    13e0:	ee 80       	ldd	r14, Y+6	; 0x06
    13e2:	fd 80       	ldd	r15, Y+5	; 0x05
    13e4:	0c 81       	ldd	r16, Y+4	; 0x04
    13e6:	1b 81       	ldd	r17, Y+3	; 0x03
    13e8:	aa 81       	ldd	r26, Y+2	; 0x02
    13ea:	b9 81       	ldd	r27, Y+1	; 0x01
    13ec:	ce 0f       	add	r28, r30
    13ee:	d1 1d       	adc	r29, r1
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	ed 01       	movw	r28, r26
    13fc:	08 95       	ret

000013fe <_exit>:
    13fe:	f8 94       	cli

00001400 <__stop_program>:
    1400:	ff cf       	rjmp	.-2      	; 0x1400 <__stop_program>
